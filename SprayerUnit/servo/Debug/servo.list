
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d8  080074d8  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  080074d8  080074d8  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074d8  080074d8  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080074e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001244  20000188  08007668  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013cc  08007668  000213cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171b3  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003655  00000000  00000000  00037364  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001268  00000000  00000000  0003a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b0  00000000  00000000  0003bc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000055f5  00000000  00000000  0003ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f98  00000000  00000000  000422cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076f03  00000000  00000000  00053265  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab8  00000000  00000000  000ca1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08007420 	.word	0x08007420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08007420 	.word	0x08007420

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b23      	ldr	r3, [pc, #140]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a22      	ldr	r2, [pc, #136]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b20      	ldr	r3, [pc, #128]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1c      	ldr	r2, [pc, #112]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b17      	ldr	r3, [pc, #92]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a16      	ldr	r2, [pc, #88]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <MX_GPIO_Init+0xa4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_1B_Pin|MOTOR_1A_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2103      	movs	r1, #3
 80001ac:	4811      	ldr	r0, [pc, #68]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001ae:	f001 f8f0 	bl	8001392 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SW_1_Pin|LIMIT_SW_2_Pin;
 80001b2:	2360      	movs	r3, #96	; 0x60
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001b6:	2300      	movs	r3, #0
 80001b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001be:	f107 0310 	add.w	r3, r7, #16
 80001c2:	4619      	mov	r1, r3
 80001c4:	480c      	ldr	r0, [pc, #48]	; (80001f8 <MX_GPIO_Init+0xac>)
 80001c6:	f000 ff73 	bl	80010b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_1B_Pin|MOTOR_1A_Pin;
 80001ca:	2303      	movs	r3, #3
 80001cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ce:	2301      	movs	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	4619      	mov	r1, r3
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001e2:	f000 ff65 	bl	80010b0 <HAL_GPIO_Init>

}
 80001e6:	bf00      	nop
 80001e8:	3720      	adds	r7, #32
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000
 80001f4:	40010c00 	.word	0x40010c00
 80001f8:	40010800 	.word	0x40010800

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fd4e 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f828 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f7ff ffa0 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 800020c:	f000 fb14 	bl	8000838 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000210:	f000 fc12 	bl	8000a38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000214:	f000 fc3a 	bl	8000a8c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000218:	f006 fc6c 	bl	8006af4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800021c:	f000 fa6a 	bl	80006f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_RxCpltCallback(&huart1);
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <main+0x50>)
 8000222:	f000 fcf1 	bl	8000c08 <HAL_UART_RxCpltCallback>
  HAL_Delay(500);
 8000226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800022a:	f000 fd9b 	bl	8000d64 <HAL_Delay>
  HAL_UART_Transmit(&huart2,(uint8_t * )"START",5,10);
 800022e:	230a      	movs	r3, #10
 8000230:	2205      	movs	r2, #5
 8000232:	4907      	ldr	r1, [pc, #28]	; (8000250 <main+0x54>)
 8000234:	4807      	ldr	r0, [pc, #28]	; (8000254 <main+0x58>)
 8000236:	f003 fb53 	bl	80038e0 <HAL_UART_Transmit>
  HAL_Delay(500);
 800023a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800023e:	f000 fd91 	bl	8000d64 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AttachDcmotor();
 8000242:	f000 f863 	bl	800030c <AttachDcmotor>
	  AttachServo();
 8000246:	f000 f8d3 	bl	80003f0 <AttachServo>
	  AttachDcmotor();
 800024a:	e7fa      	b.n	8000242 <main+0x46>
 800024c:	20000448 	.word	0x20000448
 8000250:	08007438 	.word	0x08007438
 8000254:	20000488 	.word	0x20000488

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b094      	sub	sp, #80	; 0x50
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f007 f8d2 	bl	8007410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000288:	2301      	movs	r3, #1
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 ff68 	bl	8002184 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ba:	f000 f95d 	bl	8000578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 f9d2 	bl	8002684 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002e6:	f000 f947 	bl	8000578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ea:	2310      	movs	r3, #16
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fb61 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000300:	f000 f93a 	bl	8000578 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3750      	adds	r7, #80	; 0x50
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <AttachDcmotor>:

/* USER CODE BEGIN 4 */

void AttachDcmotor(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

 if(buffer_rx[0]=='5' && buffer_rx[1]=='5')
 8000310:	4b31      	ldr	r3, [pc, #196]	; (80003d8 <AttachDcmotor+0xcc>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b35      	cmp	r3, #53	; 0x35
 8000316:	d11e      	bne.n	8000356 <AttachDcmotor+0x4a>
 8000318:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <AttachDcmotor+0xcc>)
 800031a:	785b      	ldrb	r3, [r3, #1]
 800031c:	2b35      	cmp	r3, #53	; 0x35
 800031e:	d11a      	bne.n	8000356 <AttachDcmotor+0x4a>
   {
     if(HAL_GPIO_ReadPin(GPIOA, LIMIT_SW_2_Pin))
 8000320:	2140      	movs	r1, #64	; 0x40
 8000322:	482e      	ldr	r0, [pc, #184]	; (80003dc <AttachDcmotor+0xd0>)
 8000324:	f001 f81e 	bl	8001364 <HAL_GPIO_ReadPin>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d00a      	beq.n	8000344 <AttachDcmotor+0x38>
     {
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1A_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2102      	movs	r1, #2
 8000332:	482b      	ldr	r0, [pc, #172]	; (80003e0 <AttachDcmotor+0xd4>)
 8000334:	f001 f82d 	bl	8001392 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1B_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2101      	movs	r1, #1
 800033c:	4828      	ldr	r0, [pc, #160]	; (80003e0 <AttachDcmotor+0xd4>)
 800033e:	f001 f828 	bl	8001392 <HAL_GPIO_WritePin>
 8000342:	e008      	b.n	8000356 <AttachDcmotor+0x4a>
     }
     else
     {
    	 //HAL_GPIO_WritePin(GPIOB, MOTOR_1A_Pin, GPIO_PIN_RESET);
    	// HAL_GPIO_WritePin(GPIOB, MOTOR_1B_Pin, GPIO_PIN_RESET);
    	 HAL_UART_Transmit(&huart2,(uint8_t * )"SW2 Reached\r\n",13,100);
 8000344:	2364      	movs	r3, #100	; 0x64
 8000346:	220d      	movs	r2, #13
 8000348:	4926      	ldr	r1, [pc, #152]	; (80003e4 <AttachDcmotor+0xd8>)
 800034a:	4827      	ldr	r0, [pc, #156]	; (80003e8 <AttachDcmotor+0xdc>)
 800034c:	f003 fac8 	bl	80038e0 <HAL_UART_Transmit>
    	 HAL_Delay(100);
 8000350:	2064      	movs	r0, #100	; 0x64
 8000352:	f000 fd07 	bl	8000d64 <HAL_Delay>
     }
   }

 if(buffer_rx[0]=='6' && buffer_rx[1]=='6')
 8000356:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <AttachDcmotor+0xcc>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b36      	cmp	r3, #54	; 0x36
 800035c:	d128      	bne.n	80003b0 <AttachDcmotor+0xa4>
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <AttachDcmotor+0xcc>)
 8000360:	785b      	ldrb	r3, [r3, #1]
 8000362:	2b36      	cmp	r3, #54	; 0x36
 8000364:	d124      	bne.n	80003b0 <AttachDcmotor+0xa4>
   {
     if(HAL_GPIO_ReadPin(GPIOA, LIMIT_SW_1_Pin))
 8000366:	2120      	movs	r1, #32
 8000368:	481c      	ldr	r0, [pc, #112]	; (80003dc <AttachDcmotor+0xd0>)
 800036a:	f000 fffb 	bl	8001364 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00a      	beq.n	800038a <AttachDcmotor+0x7e>
     {
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1A_Pin, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2102      	movs	r1, #2
 8000378:	4819      	ldr	r0, [pc, #100]	; (80003e0 <AttachDcmotor+0xd4>)
 800037a:	f001 f80a 	bl	8001392 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1B_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2101      	movs	r1, #1
 8000382:	4817      	ldr	r0, [pc, #92]	; (80003e0 <AttachDcmotor+0xd4>)
 8000384:	f001 f805 	bl	8001392 <HAL_GPIO_WritePin>
 8000388:	e012      	b.n	80003b0 <AttachDcmotor+0xa4>

     }
     else
     {
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1A_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2102      	movs	r1, #2
 800038e:	4814      	ldr	r0, [pc, #80]	; (80003e0 <AttachDcmotor+0xd4>)
 8000390:	f000 ffff 	bl	8001392 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1B_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	4811      	ldr	r0, [pc, #68]	; (80003e0 <AttachDcmotor+0xd4>)
 800039a:	f000 fffa 	bl	8001392 <HAL_GPIO_WritePin>
    	 HAL_UART_Transmit(&huart2,(uint8_t * )"SW1 Reached\r\n",13,10);
 800039e:	230a      	movs	r3, #10
 80003a0:	220d      	movs	r2, #13
 80003a2:	4912      	ldr	r1, [pc, #72]	; (80003ec <AttachDcmotor+0xe0>)
 80003a4:	4810      	ldr	r0, [pc, #64]	; (80003e8 <AttachDcmotor+0xdc>)
 80003a6:	f003 fa9b 	bl	80038e0 <HAL_UART_Transmit>
    	 HAL_Delay(100);
 80003aa:	2064      	movs	r0, #100	; 0x64
 80003ac:	f000 fcda 	bl	8000d64 <HAL_Delay>
      }

    }

 if(buffer_rx[0]=='1' && buffer_rx[1]=='0')
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <AttachDcmotor+0xcc>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b31      	cmp	r3, #49	; 0x31
 80003b6:	d10d      	bne.n	80003d4 <AttachDcmotor+0xc8>
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <AttachDcmotor+0xcc>)
 80003ba:	785b      	ldrb	r3, [r3, #1]
 80003bc:	2b30      	cmp	r3, #48	; 0x30
 80003be:	d109      	bne.n	80003d4 <AttachDcmotor+0xc8>
    {
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1A_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2102      	movs	r1, #2
 80003c4:	4806      	ldr	r0, [pc, #24]	; (80003e0 <AttachDcmotor+0xd4>)
 80003c6:	f000 ffe4 	bl	8001392 <HAL_GPIO_WritePin>
    	 HAL_GPIO_WritePin(GPIOB, MOTOR_1B_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2101      	movs	r1, #1
 80003ce:	4804      	ldr	r0, [pc, #16]	; (80003e0 <AttachDcmotor+0xd4>)
 80003d0:	f000 ffdf 	bl	8001392 <HAL_GPIO_WritePin>
    }
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200001a4 	.word	0x200001a4
 80003dc:	40010800 	.word	0x40010800
 80003e0:	40010c00 	.word	0x40010c00
 80003e4:	08007440 	.word	0x08007440
 80003e8:	20000488 	.word	0x20000488
 80003ec:	08007450 	.word	0x08007450

080003f0 <AttachServo>:

void AttachServo(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0

   if(buffer_rx[0]=='3' && buffer_rx[1]=='3')
 80003f4:	4b5a      	ldr	r3, [pc, #360]	; (8000560 <AttachServo+0x170>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b33      	cmp	r3, #51	; 0x33
 80003fa:	d129      	bne.n	8000450 <AttachServo+0x60>
 80003fc:	4b58      	ldr	r3, [pc, #352]	; (8000560 <AttachServo+0x170>)
 80003fe:	785b      	ldrb	r3, [r3, #1]
 8000400:	2b33      	cmp	r3, #51	; 0x33
 8000402:	d125      	bne.n	8000450 <AttachServo+0x60>
   {
      if(Servo_A_pos>24 && Servo_A_pos<126)
 8000404:	4b57      	ldr	r3, [pc, #348]	; (8000564 <AttachServo+0x174>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b18      	cmp	r3, #24
 800040a:	f340 80a2 	ble.w	8000552 <AttachServo+0x162>
 800040e:	4b55      	ldr	r3, [pc, #340]	; (8000564 <AttachServo+0x174>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b7d      	cmp	r3, #125	; 0x7d
 8000414:	f300 809d 	bgt.w	8000552 <AttachServo+0x162>
      {

		  htim2.Instance->CCR1 = Servo_A_pos;  // duty cycle is .5 ms
 8000418:	4b52      	ldr	r3, [pc, #328]	; (8000564 <AttachServo+0x174>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	4b52      	ldr	r3, [pc, #328]	; (8000568 <AttachServo+0x178>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000422:	2100      	movs	r1, #0
 8000424:	4850      	ldr	r0, [pc, #320]	; (8000568 <AttachServo+0x178>)
 8000426:	f002 fbdf 	bl	8002be8 <HAL_TIM_PWM_Start>
		  Servo_A_pos=Servo_A_pos+1;
 800042a:	4b4e      	ldr	r3, [pc, #312]	; (8000564 <AttachServo+0x174>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	4a4c      	ldr	r2, [pc, #304]	; (8000564 <AttachServo+0x174>)
 8000432:	6013      	str	r3, [r2, #0]
		  HAL_Delay(step_delay);
 8000434:	4b4d      	ldr	r3, [pc, #308]	; (800056c <AttachServo+0x17c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fc93 	bl	8000d64 <HAL_Delay>
		  if(Servo_A_pos==126)
 800043e:	4b49      	ldr	r3, [pc, #292]	; (8000564 <AttachServo+0x174>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b7e      	cmp	r3, #126	; 0x7e
 8000444:	f040 8085 	bne.w	8000552 <AttachServo+0x162>
			  {Servo_A_pos=125;}
 8000448:	4b46      	ldr	r3, [pc, #280]	; (8000564 <AttachServo+0x174>)
 800044a:	227d      	movs	r2, #125	; 0x7d
 800044c:	601a      	str	r2, [r3, #0]
      if(Servo_A_pos>24 && Servo_A_pos<126)
 800044e:	e080      	b.n	8000552 <AttachServo+0x162>

      }

   }
   else if(buffer_rx[0]=='4' && buffer_rx[1]=='4')
 8000450:	4b43      	ldr	r3, [pc, #268]	; (8000560 <AttachServo+0x170>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b34      	cmp	r3, #52	; 0x34
 8000456:	d126      	bne.n	80004a6 <AttachServo+0xb6>
 8000458:	4b41      	ldr	r3, [pc, #260]	; (8000560 <AttachServo+0x170>)
 800045a:	785b      	ldrb	r3, [r3, #1]
 800045c:	2b34      	cmp	r3, #52	; 0x34
 800045e:	d122      	bne.n	80004a6 <AttachServo+0xb6>
   {
      if(Servo_A_pos>24 && Servo_A_pos<126)
 8000460:	4b40      	ldr	r3, [pc, #256]	; (8000564 <AttachServo+0x174>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b18      	cmp	r3, #24
 8000466:	dd76      	ble.n	8000556 <AttachServo+0x166>
 8000468:	4b3e      	ldr	r3, [pc, #248]	; (8000564 <AttachServo+0x174>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b7d      	cmp	r3, #125	; 0x7d
 800046e:	dc72      	bgt.n	8000556 <AttachServo+0x166>
      {

		  htim2.Instance->CCR1 = Servo_A_pos;  // duty cycle is .5 ms
 8000470:	4b3c      	ldr	r3, [pc, #240]	; (8000564 <AttachServo+0x174>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <AttachServo+0x178>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800047a:	2100      	movs	r1, #0
 800047c:	483a      	ldr	r0, [pc, #232]	; (8000568 <AttachServo+0x178>)
 800047e:	f002 fbb3 	bl	8002be8 <HAL_TIM_PWM_Start>
		  Servo_A_pos=Servo_A_pos-1;
 8000482:	4b38      	ldr	r3, [pc, #224]	; (8000564 <AttachServo+0x174>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	3b01      	subs	r3, #1
 8000488:	4a36      	ldr	r2, [pc, #216]	; (8000564 <AttachServo+0x174>)
 800048a:	6013      	str	r3, [r2, #0]
		  HAL_Delay(step_delay);
 800048c:	4b37      	ldr	r3, [pc, #220]	; (800056c <AttachServo+0x17c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fc67 	bl	8000d64 <HAL_Delay>
		  if(Servo_A_pos==24)
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <AttachServo+0x174>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b18      	cmp	r3, #24
 800049c:	d15b      	bne.n	8000556 <AttachServo+0x166>
		  { Servo_A_pos=25;}
 800049e:	4b31      	ldr	r3, [pc, #196]	; (8000564 <AttachServo+0x174>)
 80004a0:	2219      	movs	r2, #25
 80004a2:	601a      	str	r2, [r3, #0]
      if(Servo_A_pos>24 && Servo_A_pos<126)
 80004a4:	e057      	b.n	8000556 <AttachServo+0x166>
      }
   }
   else if(buffer_rx[0]=='1' && buffer_rx[1]=='1')
 80004a6:	4b2e      	ldr	r3, [pc, #184]	; (8000560 <AttachServo+0x170>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b31      	cmp	r3, #49	; 0x31
 80004ac:	d126      	bne.n	80004fc <AttachServo+0x10c>
 80004ae:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <AttachServo+0x170>)
 80004b0:	785b      	ldrb	r3, [r3, #1]
 80004b2:	2b31      	cmp	r3, #49	; 0x31
 80004b4:	d122      	bne.n	80004fc <AttachServo+0x10c>
   {
      if(Servo_B_pos>24 && Servo_B_pos<126)
 80004b6:	4b2e      	ldr	r3, [pc, #184]	; (8000570 <AttachServo+0x180>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b18      	cmp	r3, #24
 80004bc:	dd4d      	ble.n	800055a <AttachServo+0x16a>
 80004be:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <AttachServo+0x180>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b7d      	cmp	r3, #125	; 0x7d
 80004c4:	dc49      	bgt.n	800055a <AttachServo+0x16a>
      {

		  htim1.Instance->CCR1 = Servo_B_pos;  // duty cycle is .5 ms
 80004c6:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <AttachServo+0x180>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <AttachServo+0x184>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80004d0:	2100      	movs	r1, #0
 80004d2:	4828      	ldr	r0, [pc, #160]	; (8000574 <AttachServo+0x184>)
 80004d4:	f002 fb88 	bl	8002be8 <HAL_TIM_PWM_Start>
		  Servo_B_pos=Servo_B_pos+1;
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <AttachServo+0x180>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a24      	ldr	r2, [pc, #144]	; (8000570 <AttachServo+0x180>)
 80004e0:	6013      	str	r3, [r2, #0]
		  HAL_Delay(step_delay);
 80004e2:	4b22      	ldr	r3, [pc, #136]	; (800056c <AttachServo+0x17c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fc3c 	bl	8000d64 <HAL_Delay>
		  if(Servo_B_pos==126)
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <AttachServo+0x180>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b7e      	cmp	r3, #126	; 0x7e
 80004f2:	d132      	bne.n	800055a <AttachServo+0x16a>
		  			  {Servo_B_pos=125;}
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <AttachServo+0x180>)
 80004f6:	227d      	movs	r2, #125	; 0x7d
 80004f8:	601a      	str	r2, [r3, #0]
      if(Servo_B_pos>24 && Servo_B_pos<126)
 80004fa:	e02e      	b.n	800055a <AttachServo+0x16a>
      }

   }
   else if(buffer_rx[0]=='2' && buffer_rx[1]=='2')
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <AttachServo+0x170>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b32      	cmp	r3, #50	; 0x32
 8000502:	d12b      	bne.n	800055c <AttachServo+0x16c>
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <AttachServo+0x170>)
 8000506:	785b      	ldrb	r3, [r3, #1]
 8000508:	2b32      	cmp	r3, #50	; 0x32
 800050a:	d127      	bne.n	800055c <AttachServo+0x16c>
   {
     if(Servo_B_pos>24 && Servo_B_pos<126)
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <AttachServo+0x180>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b18      	cmp	r3, #24
 8000512:	dd23      	ble.n	800055c <AttachServo+0x16c>
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <AttachServo+0x180>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b7d      	cmp	r3, #125	; 0x7d
 800051a:	dc1f      	bgt.n	800055c <AttachServo+0x16c>
      {
		 htim1.Instance->CCR1 = Servo_B_pos;  // duty cycle is .5 ms
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <AttachServo+0x180>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <AttachServo+0x184>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000526:	2100      	movs	r1, #0
 8000528:	4812      	ldr	r0, [pc, #72]	; (8000574 <AttachServo+0x184>)
 800052a:	f002 fb5d 	bl	8002be8 <HAL_TIM_PWM_Start>
		  Servo_B_pos=Servo_B_pos-1;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <AttachServo+0x180>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <AttachServo+0x180>)
 8000536:	6013      	str	r3, [r2, #0]
		  HAL_Delay(step_delay);
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <AttachServo+0x17c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fc11 	bl	8000d64 <HAL_Delay>
		  if(Servo_B_pos==24)
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <AttachServo+0x180>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b18      	cmp	r3, #24
 8000548:	d108      	bne.n	800055c <AttachServo+0x16c>
		 		  { Servo_B_pos=25;}
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <AttachServo+0x180>)
 800054c:	2219      	movs	r2, #25
 800054e:	601a      	str	r2, [r3, #0]

      }
   }

}
 8000550:	e004      	b.n	800055c <AttachServo+0x16c>
      if(Servo_A_pos>24 && Servo_A_pos<126)
 8000552:	bf00      	nop
 8000554:	e002      	b.n	800055c <AttachServo+0x16c>
      if(Servo_A_pos>24 && Servo_A_pos<126)
 8000556:	bf00      	nop
 8000558:	e000      	b.n	800055c <AttachServo+0x16c>
      if(Servo_B_pos>24 && Servo_B_pos<126)
 800055a:	bf00      	nop
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200001a4 	.word	0x200001a4
 8000564:	20000000 	.word	0x20000000
 8000568:	20000408 	.word	0x20000408
 800056c:	20000008 	.word	0x20000008
 8000570:	20000004 	.word	0x20000004
 8000574:	200003c8 	.word	0x200003c8

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_MspInit+0x5c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_MspInit+0x5c>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_MspInit+0x60>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <HAL_MspInit+0x60>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <HardFault_Handler+0x4>

080005fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <MemManage_Handler+0x4>

08000600 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <BusFault_Handler+0x4>

08000606 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 fb7a 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000642:	f000 ffc5 	bl	80015d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20001160 	.word	0x20001160

08000650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <TIM2_IRQHandler+0x10>)
 8000656:	f002 faf9 	bl	8002c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000408 	.word	0x20000408

08000664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <USART1_IRQHandler+0x10>)
 800066a:	f003 fa6b 	bl	8003b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000448 	.word	0x20000448

08000678 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <USART2_IRQHandler+0x10>)
 800067e:	f003 fa61 	bl	8003b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000488 	.word	0x20000488

0800068c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x5c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <SystemInit+0x5c>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x5c>)
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	4911      	ldr	r1, [pc, #68]	; (80006e8 <SystemInit+0x5c>)
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <SystemInit+0x60>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x5c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <SystemInit+0x5c>)
 80006ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <SystemInit+0x5c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <SystemInit+0x5c>)
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SystemInit+0x5c>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SystemInit+0x5c>)
 80006ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SystemInit+0x5c>)
 80006d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SystemInit+0x64>)
 80006da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006de:	609a      	str	r2, [r3, #8]
#endif 
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000
 80006ec:	f8ff0000 	.word	0xf8ff0000
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	; 0x58
 80006f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2220      	movs	r2, #32
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f006 fe6f 	bl	8007410 <memset>

  htim1.Instance = TIM1;
 8000732:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000734:	4a3f      	ldr	r2, [pc, #252]	; (8000834 <MX_TIM1_Init+0x140>)
 8000736:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440;
 8000738:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <MX_TIM1_Init+0x13c>)
 800073a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800073e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000754:	4b36      	ldr	r3, [pc, #216]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <MX_TIM1_Init+0x13c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000760:	4833      	ldr	r0, [pc, #204]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000762:	f002 f9e1 	bl	8002b28 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800076c:	f7ff ff04 	bl	8000578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800077a:	4619      	mov	r1, r3
 800077c:	482c      	ldr	r0, [pc, #176]	; (8000830 <MX_TIM1_Init+0x13c>)
 800077e:	f002 fc33 	bl	8002fe8 <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000788:	f7ff fef6 	bl	8000578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078c:	4828      	ldr	r0, [pc, #160]	; (8000830 <MX_TIM1_Init+0x13c>)
 800078e:	f002 f9f6 	bl	8002b7e <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000798:	f7ff feee 	bl	8000578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a8:	4619      	mov	r1, r3
 80007aa:	4821      	ldr	r0, [pc, #132]	; (8000830 <MX_TIM1_Init+0x13c>)
 80007ac:	f002 ffa4 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80007b6:	f7ff fedf 	bl	8000578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2360      	movs	r3, #96	; 0x60
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	4619      	mov	r1, r3
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_TIM1_Init+0x13c>)
 80007e0:	f002 fb3c 	bl	8002e5c <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80007ea:	f7ff fec5 	bl	8000578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000812:	f002 ffb5 	bl	8003780 <HAL_TIMEx_ConfigBreakDeadTime>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800081c:	f7ff feac 	bl	8000578 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM1_Init+0x13c>)
 8000822:	f000 f8b7 	bl	8000994 <HAL_TIM_MspPostInit>

}
 8000826:	bf00      	nop
 8000828:	3758      	adds	r7, #88	; 0x58
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200003c8 	.word	0x200003c8
 8000834:	40012c00 	.word	0x40012c00

08000838 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
 8000866:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_TIM2_Init+0xe8>)
 800086a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_TIM2_Init+0xe8>)
 8000872:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_TIM2_Init+0xe8>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_TIM2_Init+0xe8>)
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_TIM2_Init+0xe8>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_TIM2_Init+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000892:	4823      	ldr	r0, [pc, #140]	; (8000920 <MX_TIM2_Init+0xe8>)
 8000894:	f002 f948 	bl	8002b28 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800089e:	f7ff fe6b 	bl	8000578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ac:	4619      	mov	r1, r3
 80008ae:	481c      	ldr	r0, [pc, #112]	; (8000920 <MX_TIM2_Init+0xe8>)
 80008b0:	f002 fb9a 	bl	8002fe8 <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008ba:	f7ff fe5d 	bl	8000578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <MX_TIM2_Init+0xe8>)
 80008c0:	f002 f95d 	bl	8002b7e <HAL_TIM_PWM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008ca:	f7ff fe55 	bl	8000578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <MX_TIM2_Init+0xe8>)
 80008de:	f002 ff0b 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008e8:	f7ff fe46 	bl	8000578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	4619      	mov	r1, r3
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_TIM2_Init+0xe8>)
 8000904:	f002 faaa 	bl	8002e5c <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800090e:	f7ff fe33 	bl	8000578 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM2_Init+0xe8>)
 8000914:	f000 f83e 	bl	8000994 <HAL_TIM_MspPostInit>

}
 8000918:	bf00      	nop
 800091a:	3738      	adds	r7, #56	; 0x38
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000408 	.word	0x20000408

08000924 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_TIM_Base_MspInit+0x68>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10c      	bne.n	8000950 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_TIM_Base_MspInit+0x6c>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <HAL_TIM_Base_MspInit+0x6c>)
 800093c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_TIM_Base_MspInit+0x6c>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800094e:	e018      	b.n	8000982 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000958:	d113      	bne.n	8000982 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_TIM_Base_MspInit+0x6c>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <HAL_TIM_Base_MspInit+0x6c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_TIM_Base_MspInit+0x6c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	201c      	movs	r0, #28
 8000978:	f000 faed 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800097c:	201c      	movs	r0, #28
 800097e:	f000 fb06 	bl	8000f8e <HAL_NVIC_EnableIRQ>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40012c00 	.word	0x40012c00
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <HAL_TIM_MspPostInit+0x98>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d119      	bne.n	80009e8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <HAL_TIM_MspPostInit+0x9c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_TIM_MspPostInit+0x9c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_TIM_MspPostInit+0x9c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4619      	mov	r1, r3
 80009e0:	4814      	ldr	r0, [pc, #80]	; (8000a34 <HAL_TIM_MspPostInit+0xa0>)
 80009e2:	f000 fb65 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009e6:	e01c      	b.n	8000a22 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f0:	d117      	bne.n	8000a22 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_TIM_MspPostInit+0x9c>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_TIM_MspPostInit+0x9c>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_TIM_MspPostInit+0x9c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_TIM_MspPostInit+0xa0>)
 8000a1e:	f000 fb47 	bl	80010b0 <HAL_GPIO_Init>
}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800

08000a38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART1_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f002 fee9 	bl	8003846 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f7ff fd7d 	bl	8000578 <Error_Handler>
  }

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000448 	.word	0x20000448
 8000a88:	40013800 	.word	0x40013800

08000a8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_USART2_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f002 febf 	bl	8003846 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f7ff fd53 	bl	8000578 <Error_Handler>
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000488 	.word	0x20000488
 8000adc:	40004400 	.word	0x40004400

08000ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a3f      	ldr	r2, [pc, #252]	; (8000bf8 <HAL_UART_MspInit+0x118>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d13a      	bne.n	8000b76 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b00:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a37      	ldr	r2, [pc, #220]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4619      	mov	r1, r3
 8000b44:	482e      	ldr	r0, [pc, #184]	; (8000c00 <HAL_UART_MspInit+0x120>)
 8000b46:	f000 fab3 	bl	80010b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4828      	ldr	r0, [pc, #160]	; (8000c00 <HAL_UART_MspInit+0x120>)
 8000b60:	f000 faa6 	bl	80010b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2025      	movs	r0, #37	; 0x25
 8000b6a:	f000 f9f4 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b6e:	2025      	movs	r0, #37	; 0x25
 8000b70:	f000 fa0d 	bl	8000f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b74:	e03c      	b.n	8000bf0 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a22      	ldr	r2, [pc, #136]	; (8000c04 <HAL_UART_MspInit+0x124>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d137      	bne.n	8000bf0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8a:	61d3      	str	r3, [r2, #28]
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b8e:	69db      	ldr	r3, [r3, #28]
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_UART_MspInit+0x11c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <HAL_UART_MspInit+0x120>)
 8000bc4:	f000 fa74 	bl	80010b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <HAL_UART_MspInit+0x120>)
 8000bdc:	f000 fa68 	bl	80010b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2026      	movs	r0, #38	; 0x26
 8000be6:	f000 f9b6 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bea:	2026      	movs	r0, #38	; 0x26
 8000bec:	f000 f9cf 	bl	8000f8e <HAL_NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40013800 	.word	0x40013800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	40004400 	.word	0x40004400

08000c08 <HAL_UART_RxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_UART_RxCpltCallback+0x38>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10e      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_IT(&huart1, buffer_rx, 2);
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	4909      	ldr	r1, [pc, #36]	; (8000c44 <HAL_UART_RxCpltCallback+0x3c>)
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <HAL_UART_RxCpltCallback+0x40>)
 8000c20:	f002 ff3b 	bl	8003a9a <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart2,buffer_rx,2);
 8000c24:	2202      	movs	r2, #2
 8000c26:	4907      	ldr	r1, [pc, #28]	; (8000c44 <HAL_UART_RxCpltCallback+0x3c>)
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <HAL_UART_RxCpltCallback+0x44>)
 8000c2a:	f002 fef2 	bl	8003a12 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)"\r\n",2);
 8000c2e:	2202      	movs	r2, #2
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <HAL_UART_RxCpltCallback+0x48>)
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <HAL_UART_RxCpltCallback+0x44>)
 8000c34:	f002 feed 	bl	8003a12 <HAL_UART_Transmit_IT>
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40013800 	.word	0x40013800
 8000c44:	200001a4 	.word	0x200001a4
 8000c48:	20000448 	.word	0x20000448
 8000c4c:	20000488 	.word	0x20000488
 8000c50:	08007460 	.word	0x08007460

08000c54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c56:	e003      	b.n	8000c60 <LoopCopyDataInit>

08000c58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c5e:	3104      	adds	r1, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c60:	480a      	ldr	r0, [pc, #40]	; (8000c8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c68:	d3f6      	bcc.n	8000c58 <CopyDataInit>
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c6c:	e002      	b.n	8000c74 <LoopFillZerobss>

08000c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c70:	f842 3b04 	str.w	r3, [r2], #4

08000c74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c78:	d3f9      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c7a:	f7ff fd07 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f006 fba3 	bl	80073c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c82:	f7ff fabb 	bl	80001fc <main>
  bx lr
 8000c86:	4770      	bx	lr
  ldr r3, =_sidata
 8000c88:	080074e0 	.word	0x080074e0
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c90:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 8000c94:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8000c98:	200013cc 	.word	0x200013cc

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x28>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x28>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f945 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fc62 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f95d 	bl	8000faa <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f925 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000014 	.word	0x20000014
 8000d28:	20000010 	.word	0x20000010

08000d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_IncTick+0x1c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_IncTick+0x20>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <HAL_IncTick+0x20>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000014 	.word	0x20000014
 8000d4c:	200004c8 	.word	0x200004c8

08000d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <HAL_GetTick+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	200004c8 	.word	0x200004c8

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff fff0 	bl	8000d50 <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_Delay+0x40>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffe0 	bl	8000d50 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000014 	.word	0x20000014

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4906      	ldr	r1, [pc, #24]	; (8000e40 <__NVIC_EnableIRQ+0x34>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db0a      	blt.n	8000e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <__NVIC_SetPriority+0x4c>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440b      	add	r3, r1
 8000e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e6c:	e00a      	b.n	8000e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	4908      	ldr	r1, [pc, #32]	; (8000e94 <__NVIC_SetPriority+0x50>)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	3b04      	subs	r3, #4
 8000e7c:	0112      	lsls	r2, r2, #4
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	440b      	add	r3, r1
 8000e82:	761a      	strb	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f1c3 0307 	rsb	r3, r3, #7
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	bf28      	it	cs
 8000eb6:	2304      	movcs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d902      	bls.n	8000ec8 <NVIC_EncodePriority+0x30>
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	e000      	b.n	8000eca <NVIC_EncodePriority+0x32>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	401a      	ands	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43d9      	mvns	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	4313      	orrs	r3, r2
         );
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff90 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff2d 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff42 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff90 	bl	8000e98 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5f 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff35 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d005      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2204      	movs	r2, #4
 8000fde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e051      	b.n	800108a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 020e 	bic.w	r2, r2, #14
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0201 	bic.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <HAL_DMA_Abort_IT+0xd0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d029      	beq.n	8001064 <HAL_DMA_Abort_IT+0xa0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a20      	ldr	r2, [pc, #128]	; (8001098 <HAL_DMA_Abort_IT+0xd4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d022      	beq.n	8001060 <HAL_DMA_Abort_IT+0x9c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_DMA_Abort_IT+0xd8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d01a      	beq.n	800105a <HAL_DMA_Abort_IT+0x96>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <HAL_DMA_Abort_IT+0xdc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d012      	beq.n	8001054 <HAL_DMA_Abort_IT+0x90>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <HAL_DMA_Abort_IT+0xe0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d00a      	beq.n	800104e <HAL_DMA_Abort_IT+0x8a>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_DMA_Abort_IT+0xe4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d102      	bne.n	8001048 <HAL_DMA_Abort_IT+0x84>
 8001042:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001046:	e00e      	b.n	8001066 <HAL_DMA_Abort_IT+0xa2>
 8001048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800104c:	e00b      	b.n	8001066 <HAL_DMA_Abort_IT+0xa2>
 800104e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001052:	e008      	b.n	8001066 <HAL_DMA_Abort_IT+0xa2>
 8001054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001058:	e005      	b.n	8001066 <HAL_DMA_Abort_IT+0xa2>
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	e002      	b.n	8001066 <HAL_DMA_Abort_IT+0xa2>
 8001060:	2310      	movs	r3, #16
 8001062:	e000      	b.n	8001066 <HAL_DMA_Abort_IT+0xa2>
 8001064:	2301      	movs	r3, #1
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_DMA_Abort_IT+0xe8>)
 8001068:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4798      	blx	r3
    } 
  }
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020008 	.word	0x40020008
 8001098:	4002001c 	.word	0x4002001c
 800109c:	40020030 	.word	0x40020030
 80010a0:	40020044 	.word	0x40020044
 80010a4:	40020058 	.word	0x40020058
 80010a8:	4002006c 	.word	0x4002006c
 80010ac:	40020000 	.word	0x40020000

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b08b      	sub	sp, #44	; 0x2c
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e127      	b.n	8001314 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010c4:	2201      	movs	r2, #1
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8116 	bne.w	800130e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d034      	beq.n	8001154 <HAL_GPIO_Init+0xa4>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d80d      	bhi.n	800110a <HAL_GPIO_Init+0x5a>
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d02b      	beq.n	800114a <HAL_GPIO_Init+0x9a>
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d804      	bhi.n	8001100 <HAL_GPIO_Init+0x50>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d031      	beq.n	800115e <HAL_GPIO_Init+0xae>
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d01c      	beq.n	8001138 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fe:	e048      	b.n	8001192 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001100:	2b03      	cmp	r3, #3
 8001102:	d043      	beq.n	800118c <HAL_GPIO_Init+0xdc>
 8001104:	2b11      	cmp	r3, #17
 8001106:	d01b      	beq.n	8001140 <HAL_GPIO_Init+0x90>
          break;
 8001108:	e043      	b.n	8001192 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800110a:	4a89      	ldr	r2, [pc, #548]	; (8001330 <HAL_GPIO_Init+0x280>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d026      	beq.n	800115e <HAL_GPIO_Init+0xae>
 8001110:	4a87      	ldr	r2, [pc, #540]	; (8001330 <HAL_GPIO_Init+0x280>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d806      	bhi.n	8001124 <HAL_GPIO_Init+0x74>
 8001116:	4a87      	ldr	r2, [pc, #540]	; (8001334 <HAL_GPIO_Init+0x284>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d020      	beq.n	800115e <HAL_GPIO_Init+0xae>
 800111c:	4a86      	ldr	r2, [pc, #536]	; (8001338 <HAL_GPIO_Init+0x288>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d01d      	beq.n	800115e <HAL_GPIO_Init+0xae>
          break;
 8001122:	e036      	b.n	8001192 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001124:	4a85      	ldr	r2, [pc, #532]	; (800133c <HAL_GPIO_Init+0x28c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0xae>
 800112a:	4a85      	ldr	r2, [pc, #532]	; (8001340 <HAL_GPIO_Init+0x290>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d016      	beq.n	800115e <HAL_GPIO_Init+0xae>
 8001130:	4a84      	ldr	r2, [pc, #528]	; (8001344 <HAL_GPIO_Init+0x294>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0xae>
          break;
 8001136:	e02c      	b.n	8001192 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	623b      	str	r3, [r7, #32]
          break;
 800113e:	e028      	b.n	8001192 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	3304      	adds	r3, #4
 8001146:	623b      	str	r3, [r7, #32]
          break;
 8001148:	e023      	b.n	8001192 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	3308      	adds	r3, #8
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e01e      	b.n	8001192 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	330c      	adds	r3, #12
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e019      	b.n	8001192 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001166:	2304      	movs	r3, #4
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e012      	b.n	8001192 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d105      	bne.n	8001180 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001174:	2308      	movs	r3, #8
 8001176:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	611a      	str	r2, [r3, #16]
          break;
 800117e:	e008      	b.n	8001192 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	615a      	str	r2, [r3, #20]
          break;
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2bff      	cmp	r3, #255	; 0xff
 8001196:	d801      	bhi.n	800119c <HAL_GPIO_Init+0xec>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	e001      	b.n	80011a0 <HAL_GPIO_Init+0xf0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3304      	adds	r3, #4
 80011a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2bff      	cmp	r3, #255	; 0xff
 80011a6:	d802      	bhi.n	80011ae <HAL_GPIO_Init+0xfe>
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x104>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	3b08      	subs	r3, #8
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	210f      	movs	r1, #15
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	401a      	ands	r2, r3
 80011c6:	6a39      	ldr	r1, [r7, #32]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	431a      	orrs	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8096 	beq.w	800130e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e2:	4b59      	ldr	r3, [pc, #356]	; (8001348 <HAL_GPIO_Init+0x298>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a58      	ldr	r2, [pc, #352]	; (8001348 <HAL_GPIO_Init+0x298>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b56      	ldr	r3, [pc, #344]	; (8001348 <HAL_GPIO_Init+0x298>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011fa:	4a54      	ldr	r2, [pc, #336]	; (800134c <HAL_GPIO_Init+0x29c>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <HAL_GPIO_Init+0x2a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x19e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4a      	ldr	r2, [pc, #296]	; (8001354 <HAL_GPIO_Init+0x2a4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x19a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a49      	ldr	r2, [pc, #292]	; (8001358 <HAL_GPIO_Init+0x2a8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x196>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a48      	ldr	r2, [pc, #288]	; (800135c <HAL_GPIO_Init+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x192>
 800123e:	2303      	movs	r3, #3
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x1a0>
 8001242:	2304      	movs	r3, #4
 8001244:	e004      	b.n	8001250 <HAL_GPIO_Init+0x1a0>
 8001246:	2302      	movs	r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x1a0>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x1a0>
 800124e:	2300      	movs	r3, #0
 8001250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001252:	f002 0203 	and.w	r2, r2, #3
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4093      	lsls	r3, r2
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001260:	493a      	ldr	r1, [pc, #232]	; (800134c <HAL_GPIO_Init+0x29c>)
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	089b      	lsrs	r3, r3, #2
 8001266:	3302      	adds	r3, #2
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4938      	ldr	r1, [pc, #224]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
 8001286:	e006      	b.n	8001296 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001288:	4b35      	ldr	r3, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	43db      	mvns	r3, r3
 8001290:	4933      	ldr	r1, [pc, #204]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 8001292:	4013      	ands	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	492e      	ldr	r1, [pc, #184]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
 80012ae:	e006      	b.n	80012be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	4929      	ldr	r1, [pc, #164]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	4924      	ldr	r1, [pc, #144]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	43db      	mvns	r3, r3
 80012e0:	491f      	ldr	r1, [pc, #124]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	491a      	ldr	r1, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60cb      	str	r3, [r1, #12]
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	43db      	mvns	r3, r3
 8001308:	4915      	ldr	r1, [pc, #84]	; (8001360 <HAL_GPIO_Init+0x2b0>)
 800130a:	4013      	ands	r3, r2
 800130c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f aed0 	bne.w	80010c4 <HAL_GPIO_Init+0x14>
  }
}
 8001324:	bf00      	nop
 8001326:	372c      	adds	r7, #44	; 0x2c
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	10210000 	.word	0x10210000
 8001334:	10110000 	.word	0x10110000
 8001338:	10120000 	.word	0x10120000
 800133c:	10310000 	.word	0x10310000
 8001340:	10320000 	.word	0x10320000
 8001344:	10220000 	.word	0x10220000
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00
 8001358:	40011000 	.word	0x40011000
 800135c:	40011400 	.word	0x40011400
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	807b      	strh	r3, [r7, #2]
 800139e:	4613      	mov	r3, r2
 80013a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a2:	787b      	ldrb	r3, [r7, #1]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a8:	887a      	ldrh	r2, [r7, #2]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	041a      	lsls	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	611a      	str	r2, [r3, #16]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c4:	b08b      	sub	sp, #44	; 0x2c
 80013c6:	af06      	add	r7, sp, #24
 80013c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0d3      	b.n	800157c <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d106      	bne.n	80013ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f005 fd4f 	bl	8006e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 ff1b 	bl	8004236 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	687e      	ldr	r6, [r7, #4]
 8001408:	466d      	mov	r5, sp
 800140a:	f106 0410 	add.w	r4, r6, #16
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	602b      	str	r3, [r5, #0]
 8001416:	1d33      	adds	r3, r6, #4
 8001418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f002 fee4 	bl	80041e8 <USB_CoreInit>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2202      	movs	r2, #2
 800142a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0a4      	b.n	800157c <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f002 ff18 	bl	800426e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e035      	b.n	80014b0 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	015b      	lsls	r3, r3, #5
 800144a:	4413      	add	r3, r2
 800144c:	3329      	adds	r3, #41	; 0x29
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	4413      	add	r3, r2
 800145a:	3328      	adds	r3, #40	; 0x28
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	b291      	uxth	r1, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	015b      	lsls	r3, r3, #5
 800146a:	4413      	add	r3, r2
 800146c:	3336      	adds	r3, #54	; 0x36
 800146e:	460a      	mov	r2, r1
 8001470:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	015b      	lsls	r3, r3, #5
 8001478:	4413      	add	r3, r2
 800147a:	332b      	adds	r3, #43	; 0x2b
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	015b      	lsls	r3, r3, #5
 8001486:	4413      	add	r3, r2
 8001488:	3338      	adds	r3, #56	; 0x38
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	015b      	lsls	r3, r3, #5
 8001494:	4413      	add	r3, r2
 8001496:	333c      	adds	r3, #60	; 0x3c
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	3302      	adds	r3, #2
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	4413      	add	r3, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	3301      	adds	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3c4      	bcc.n	8001444 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e031      	b.n	8001524 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	4413      	add	r3, r2
 80014c8:	f203 1329 	addw	r3, r3, #297	; 0x129
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	015b      	lsls	r3, r3, #5
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	4413      	add	r3, r2
 80014e8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	015b      	lsls	r3, r3, #5
 8001506:	4413      	add	r3, r2
 8001508:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	330a      	adds	r3, #10
 8001516:	015b      	lsls	r3, r3, #5
 8001518:	4413      	add	r3, r2
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	3301      	adds	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3c8      	bcc.n	80014c0 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	687e      	ldr	r6, [r7, #4]
 8001536:	466d      	mov	r5, sp
 8001538:	f106 0410 	add.w	r4, r6, #16
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	602b      	str	r3, [r5, #0]
 8001544:	1d33      	adds	r3, r6, #4
 8001546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f002 fe9c 	bl	8004286 <USB_DevInit>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e00d      	b.n	800157c <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 feda 	bl	800532e <USB_DevDisconnect>

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001584 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <HAL_PCD_Start+0x16>
 8001596:	2302      	movs	r3, #2
 8001598:	e016      	b.n	80015c8 <HAL_PCD_Start+0x44>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015a2:	2101      	movs	r1, #1
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f005 fed8 	bl	800735a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 feb3 	bl	800531a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fe25 	bl	8004208 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 feb0 	bl	8005342 <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ec:	d102      	bne.n	80015f4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 faf2 	bl	8001bd8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fea2 	bl	8005342 <USB_ReadInterrupts>
 80015fe:	4603      	mov	r3, r0
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001608:	d112      	bne.n	8001630 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800161c:	b292      	uxth	r2, r2
 800161e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f005 fca7 	bl	8006f76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001628:	2100      	movs	r1, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f8de 	bl	80017ec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f003 fe84 	bl	8005342 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001644:	d10b      	bne.n	800165e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001658:	b292      	uxth	r2, r2
 800165a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fe6d 	bl	8005342 <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001672:	d10b      	bne.n	800168c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fe56 	bl	8005342 <USB_ReadInterrupts>
 8001696:	4603      	mov	r3, r0
 8001698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a0:	d126      	bne.n	80016f0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0204 	bic.w	r2, r2, #4
 80016b4:	b292      	uxth	r2, r2
 80016b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	b292      	uxth	r2, r2
 80016ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f005 fc88 	bl	8006fe8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016ea:	b292      	uxth	r2, r2
 80016ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fe24 	bl	8005342 <USB_ReadInterrupts>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001704:	d13d      	bne.n	8001782 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800170e:	b29a      	uxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0208 	orr.w	r2, r2, #8
 8001718:	b292      	uxth	r2, r2
 800171a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001730:	b292      	uxth	r2, r2
 8001732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800173e:	b29a      	uxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0204 	orr.w	r2, r2, #4
 8001748:	b292      	uxth	r2, r2
 800174a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fdf5 	bl	8005342 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001762:	d10b      	bne.n	800177c <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001776:	b292      	uxth	r2, r2
 8001778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f005 fc19 	bl	8006fb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fddb 	bl	8005342 <USB_ReadInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001796:	d10e      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017aa:	b292      	uxth	r2, r2
 80017ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f005 fbd2 	bl	8006f5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fdc1 	bl	8005342 <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ca:	d10b      	bne.n	80017e4 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017de:	b292      	uxth	r2, r2
 80017e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_PCD_SetAddress+0x1a>
 8001802:	2302      	movs	r3, #2
 8001804:	e013      	b.n	800182e <HAL_PCD_SetAddress+0x42>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fd68 	bl	80052f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	4608      	mov	r0, r1
 8001840:	4611      	mov	r1, r2
 8001842:	461a      	mov	r2, r3
 8001844:	4603      	mov	r3, r0
 8001846:	70fb      	strb	r3, [r7, #3]
 8001848:	460b      	mov	r3, r1
 800184a:	803b      	strh	r3, [r7, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001858:	2b00      	cmp	r3, #0
 800185a:	da0b      	bge.n	8001874 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	3328      	adds	r3, #40	; 0x28
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	705a      	strb	r2, [r3, #1]
 8001872:	e00b      	b.n	800188c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	b2da      	uxtb	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001898:	883a      	ldrh	r2, [r7, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	78ba      	ldrb	r2, [r7, #2]
 80018a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d102      	bne.n	80018c2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_PCD_EP_Open+0x9a>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e00e      	b.n	80018ee <HAL_PCD_EP_Open+0xb8>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68f9      	ldr	r1, [r7, #12]
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fcf6 	bl	80042d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80018ec:	7afb      	ldrb	r3, [r7, #11]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001906:	2b00      	cmp	r3, #0
 8001908:	da0b      	bge.n	8001922 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	015b      	lsls	r3, r3, #5
 8001912:	3328      	adds	r3, #40	; 0x28
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	705a      	strb	r2, [r3, #1]
 8001920:	e00b      	b.n	800193a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	015b      	lsls	r3, r3, #5
 800192a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	b2da      	uxtb	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_PCD_EP_Close+0x5e>
 8001950:	2302      	movs	r3, #2
 8001952:	e00e      	b.n	8001972 <HAL_PCD_EP_Close+0x7c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 ffa2 	bl	80048ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	460b      	mov	r3, r1
 8001988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198a:	7afb      	ldrb	r3, [r7, #11]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2200      	movs	r2, #0
 80019b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6979      	ldr	r1, [r7, #20]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 f901 	bl	8004bd8 <USB_EPStartXfer>
 80019d6:	e005      	b.n	80019e4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6979      	ldr	r1, [r7, #20]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 f8fa 	bl	8004bd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	330a      	adds	r3, #10
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	460b      	mov	r3, r1
 8001a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	015b      	lsls	r3, r3, #5
 8001a2e:	3328      	adds	r3, #40	; 0x28
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4e:	7afb      	ldrb	r3, [r7, #11]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6979      	ldr	r1, [r7, #20]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 f8b4 	bl	8004bd8 <USB_EPStartXfer>
 8001a70:	e005      	b.n	8001a7e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6979      	ldr	r1, [r7, #20]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 f8ad 	bl	8004bd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f003 0207 	and.w	r2, r3, #7
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d901      	bls.n	8001aa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e046      	b.n	8001b34 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	da0b      	bge.n	8001ac6 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	015b      	lsls	r3, r3, #5
 8001ab6:	3328      	adds	r3, #40	; 0x28
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	705a      	strb	r2, [r3, #1]
 8001ac4:	e009      	b.n	8001ada <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	015b      	lsls	r3, r3, #5
 8001aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_PCD_EP_SetStall+0x72>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e01c      	b.n	8001b34 <HAL_PCD_EP_SetStall+0xac>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fb1d 	bl	8005148 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d108      	bne.n	8001b2a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f003 fc1b 	bl	8005360 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d901      	bls.n	8001b5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e03a      	b.n	8001bd0 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da0b      	bge.n	8001b7a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	3328      	adds	r3, #40	; 0x28
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	705a      	strb	r2, [r3, #1]
 8001b78:	e00b      	b.n	8001b92 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	015b      	lsls	r3, r3, #5
 8001b82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_PCD_EP_ClrStall+0x76>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e00e      	b.n	8001bd0 <HAL_PCD_EP_ClrStall+0x94>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fb03 	bl	80051cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001be0:	e282      	b.n	80020e8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bea:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bec:	8afb      	ldrh	r3, [r7, #22]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001bf6:	7d7b      	ldrb	r3, [r7, #21]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 8142 	bne.w	8001e82 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001bfe:	8afb      	ldrh	r3, [r7, #22]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d151      	bne.n	8001cac <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c18:	b29c      	uxth	r4, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3328      	adds	r3, #40	; 0x28
 8001c2e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	3302      	adds	r3, #2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	441a      	add	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f005 f95d 	bl	8006f2c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8234 	beq.w	80020e8 <PCD_EP_ISR_Handler+0x510>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 822f 	bne.w	80020e8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001caa:	e21d      	b.n	80020e8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cb2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001cbc:	8a7b      	ldrh	r3, [r7, #18]
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d033      	beq.n	8001d2e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3306      	adds	r3, #6
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f003 fb7a 	bl	80053fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d16:	4013      	ands	r3, r2
 8001d18:	b29c      	uxth	r4, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001d22:	b292      	uxth	r2, r2
 8001d24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f005 f8d6 	bl	8006ed8 <HAL_PCD_SetupStageCallback>
 8001d2c:	e1dc      	b.n	80020e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f280 81d8 	bge.w	80020e8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d44:	4013      	ands	r3, r2
 8001d46:	b29c      	uxth	r4, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001d50:	b292      	uxth	r2, r2
 8001d52:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	3306      	adds	r3, #6
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d019      	beq.n	8001dbc <PCD_EP_ISR_Handler+0x1e4>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d015      	beq.n	8001dbc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6959      	ldr	r1, [r3, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f003 fb2c 	bl	80053fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	441a      	add	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001db4:	2100      	movs	r1, #0
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f005 f8a0 	bl	8006efc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	441c      	add	r4, r3
 8001dce:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001dd2:	461c      	mov	r4, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10e      	bne.n	8001dfa <PCD_EP_ISR_Handler+0x222>
 8001ddc:	8823      	ldrh	r3, [r4, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	8023      	strh	r3, [r4, #0]
 8001de8:	8823      	ldrh	r3, [r4, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	8023      	strh	r3, [r4, #0]
 8001df8:	e02d      	b.n	8001e56 <PCD_EP_ISR_Handler+0x27e>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8001e00:	d812      	bhi.n	8001e28 <PCD_EP_ISR_Handler+0x250>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <PCD_EP_ISR_Handler+0x244>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	8023      	strh	r3, [r4, #0]
 8001e26:	e016      	b.n	8001e56 <PCD_EP_ISR_Handler+0x27e>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <PCD_EP_ISR_Handler+0x26a>
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	029b      	lsls	r3, r3, #10
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e66:	b29c      	uxth	r4, r3
 8001e68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001e6c:	b29c      	uxth	r4, r3
 8001e6e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001e72:	b29c      	uxth	r4, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4ba2      	ldr	r3, [pc, #648]	; (8002104 <PCD_EP_ISR_Handler+0x52c>)
 8001e7a:	4323      	orrs	r3, r4
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	8013      	strh	r3, [r2, #0]
 8001e80:	e132      	b.n	80020e8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	7d7b      	ldrb	r3, [r7, #21]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f280 80d1 	bge.w	800203e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	7d7b      	ldrb	r3, [r7, #21]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	b29c      	uxth	r4, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	7d7b      	ldrb	r3, [r7, #21]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ec8:	7d7b      	ldrb	r3, [r7, #21]
 8001eca:	015b      	lsls	r3, r3, #5
 8001ecc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	7b1b      	ldrb	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d121      	bne.n	8001f22 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f06:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001f08:	8bfb      	ldrh	r3, [r7, #30]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d072      	beq.n	8001ff4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6959      	ldr	r1, [r3, #20]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	88da      	ldrh	r2, [r3, #6]
 8001f1a:	8bfb      	ldrh	r3, [r7, #30]
 8001f1c:	f003 fa6f 	bl	80053fe <USB_ReadPMA>
 8001f20:	e068      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d021      	beq.n	8001f80 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3302      	adds	r3, #2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f64:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001f66:	8bfb      	ldrh	r3, [r7, #30]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d02a      	beq.n	8001fc2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6959      	ldr	r1, [r3, #20]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	891a      	ldrh	r2, [r3, #8]
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	f003 fa40 	bl	80053fe <USB_ReadPMA>
 8001f7e:	e020      	b.n	8001fc2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	3306      	adds	r3, #6
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001faa:	8bfb      	ldrh	r3, [r7, #30]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6959      	ldr	r1, [r3, #20]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	895a      	ldrh	r2, [r3, #10]
 8001fbc:	8bfb      	ldrh	r3, [r7, #30]
 8001fbe:	f003 fa1e 	bl	80053fe <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fdc:	b29c      	uxth	r4, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	441a      	add	r2, r3
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <PCD_EP_ISR_Handler+0x530>)
 8001fee:	4323      	orrs	r3, r4
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	8bfb      	ldrh	r3, [r7, #30]
 8001ffa:	441a      	add	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	8bfb      	ldrh	r3, [r7, #30]
 8002006:	441a      	add	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <PCD_EP_ISR_Handler+0x446>
 8002014:	8bfa      	ldrh	r2, [r7, #30]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d206      	bcs.n	800202c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f004 ff69 	bl	8006efc <HAL_PCD_DataOutStageCallback>
 800202a:	e008      	b.n	800203e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	7819      	ldrb	r1, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fc9e 	bl	800197a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800203e:	8a7b      	ldrh	r3, [r7, #18]
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	d04f      	beq.n	80020e8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002048:	7d7b      	ldrb	r3, [r7, #21]
 800204a:	015b      	lsls	r3, r3, #5
 800204c:	3328      	adds	r3, #40	; 0x28
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	7d7b      	ldrb	r3, [r7, #21]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206c:	b29c      	uxth	r4, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	7d7b      	ldrb	r3, [r7, #21]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800207e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002082:	b29b      	uxth	r3, r3
 8002084:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	3302      	adds	r3, #2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	441a      	add	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f004 ff2c 	bl	8006f2c <HAL_PCD_DataInStageCallback>
 80020d4:	e008      	b.n	80020e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	7819      	ldrb	r1, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fc97 	bl	8001a16 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f6ff ad74 	blt.w	8001be2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3724      	adds	r7, #36	; 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	ffff8080 	.word	0xffff8080
 8002108:	ffff80c0 	.word	0xffff80c0

0800210c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	817b      	strh	r3, [r7, #10]
 800211a:	4613      	mov	r3, r2
 800211c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800211e:	897b      	ldrh	r3, [r7, #10]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	3328      	adds	r3, #40	; 0x28
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e006      	b.n	800214a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	015b      	lsls	r3, r3, #5
 8002140:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800214a:	893b      	ldrh	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2200      	movs	r2, #0
 8002154:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	b29a      	uxth	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	80da      	strh	r2, [r3, #6]
 800215e:	e00b      	b.n	8002178 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2201      	movs	r2, #1
 8002164:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	b29a      	uxth	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	b29a      	uxth	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e26c      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d00c      	beq.n	80021ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b0:	4b8f      	ldr	r3, [pc, #572]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d112      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
 80021bc:	4b8c      	ldr	r3, [pc, #560]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d06c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x12c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d168      	bne.n	80022b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e246      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x76>
 80021ec:	4b80      	ldr	r3, [pc, #512]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7f      	ldr	r2, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	e02e      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a77      	ldr	r2, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0xbc>
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a71      	ldr	r2, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe fd76 	bl	8000d50 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7fe fd72 	bl	8000d50 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1fa      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xe4>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fd62 	bl	8000d50 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe fd5e 	bl	8000d50 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1e6      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x10c>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1ba      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4939      	ldr	r1, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fd17 	bl	8000d50 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe fd13 	bl	8000d50 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e19b      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4927      	ldr	r1, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fcf6 	bl	8000d50 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe fcf2 	bl	8000d50 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e17a      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03a      	beq.n	8002408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7fe fcd6 	bl	8000d50 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fcd2 	bl	8000d50 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e15a      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 fada 	bl	8002980 <RCC_Delay>
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe fcbc 	bl	8000d50 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	e00f      	b.n	80023fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fcb8 	bl	8000d50 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d908      	bls.n	80023fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e140      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	42420000 	.word	0x42420000
 80023f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b9e      	ldr	r3, [pc, #632]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e9      	bne.n	80023dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a6 	beq.w	8002562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b97      	ldr	r3, [pc, #604]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b94      	ldr	r3, [pc, #592]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a93      	ldr	r2, [pc, #588]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b91      	ldr	r3, [pc, #580]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	4b8e      	ldr	r3, [pc, #568]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a8a      	ldr	r2, [pc, #552]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7fe fc79 	bl	8000d50 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7fe fc75 	bl	8000d50 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	; 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0fd      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x312>
 8002488:	4b7b      	ldr	r3, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a7a      	ldr	r2, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x334>
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b73      	ldr	r3, [pc, #460]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a72      	ldr	r2, [pc, #456]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x356>
 80024c0:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6c      	ldr	r2, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a66      	ldr	r2, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fc29 	bl	8000d50 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fc25 	bl	8000d50 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0ab      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x37e>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe fc13 	bl	8000d50 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fc0f 	bl	8000d50 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e095      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b48      	ldr	r3, [pc, #288]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a47      	ldr	r2, [pc, #284]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8081 	beq.w	800266e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d061      	beq.n	800263c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d146      	bne.n	800260e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fbe3 	bl	8000d50 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fbdf 	bl	8000d50 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e067      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	492d      	ldr	r1, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a19      	ldr	r1, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	430b      	orrs	r3, r1
 80025da:	4927      	ldr	r1, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fbb3 	bl	8000d50 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe fbaf 	bl	8000d50 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e037      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x46a>
 800260c:	e02f      	b.n	800266e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fb9c 	bl	8000d50 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fb98 	bl	8000d50 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e020      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x498>
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e013      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	42420060 	.word	0x42420060

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d0      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4965      	ldr	r1, [pc, #404]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a52      	ldr	r2, [pc, #328]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d040      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d115      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e073      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06b      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4936      	ldr	r1, [pc, #216]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7fe faec 	bl	8000d50 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7fe fae8 	bl	8000d50 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e053      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d210      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4922      	ldr	r1, [pc, #136]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4601      	mov	r1, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	5cd3      	ldrb	r3, [r2, r3]
 8002826:	fa21 f303 	lsr.w	r3, r1, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fa4a 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40022000 	.word	0x40022000
 8002848:	40021000 	.word	0x40021000
 800284c:	080074c0 	.word	0x080074c0
 8002850:	2000000c 	.word	0x2000000c
 8002854:	20000010 	.word	0x20000010

08002858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b490      	push	{r4, r7}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002860:	1d3c      	adds	r4, r7, #4
 8002862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCC_GetSysClockFreq+0xb4>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d002      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x40>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x46>
 8002896:	e02d      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_RCC_GetSysClockFreq+0xbc>)
 800289a:	623b      	str	r3, [r7, #32]
      break;
 800289c:	e02d      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028aa:	4413      	add	r3, r2
 80028ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	0c5b      	lsrs	r3, r3, #17
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ca:	4413      	add	r3, r2
 80028cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d6:	fb02 f203 	mul.w	r2, r2, r3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	e004      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	623b      	str	r3, [r7, #32]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc90      	pop	{r4, r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	08007464 	.word	0x08007464
 800290c:	08007474 	.word	0x08007474
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	003d0900 	.word	0x003d0900

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_RCC_GetHCLKFreq+0x10>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	2000000c 	.word	0x2000000c

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff2 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002938:	4601      	mov	r1, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4a03      	ldr	r2, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5cd3      	ldrb	r3, [r2, r3]
 8002948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	080074d0 	.word	0x080074d0

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffde 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002960:	4601      	mov	r1, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0adb      	lsrs	r3, r3, #11
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	080074d0 	.word	0x080074d0

08002980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <RCC_Delay+0x34>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <RCC_Delay+0x38>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0a5b      	lsrs	r3, r3, #9
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800299c:	bf00      	nop
  }
  while (Delay --);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	60fa      	str	r2, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <RCC_Delay+0x1c>
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c
 80029b8:	10624dd3 	.word	0x10624dd3

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d07d      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10d      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a4b      	ldr	r2, [pc, #300]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	61d3      	str	r3, [r2, #28]
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d118      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe f998 	bl	8000d50 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	e008      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a24:	f7fe f994 	bl	8000d50 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e06d      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d02e      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d027      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a76:	4a29      	ldr	r2, [pc, #164]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d014      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe f963 	bl	8000d50 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe f95f 	bl	8000d50 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e036      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ee      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4917      	ldr	r1, [pc, #92]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	490b      	ldr	r1, [pc, #44]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4904      	ldr	r1, [pc, #16]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42420440 	.word	0x42420440

08002b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e01d      	b.n	8002b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd fee8 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 fb22 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e01d      	b.n	8002bcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f815 	bl	8002bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f000 faf7 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	6839      	ldr	r1, [r7, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd58 	bl	80036b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <HAL_TIM_PWM_Start+0x60>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00

08002c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0202 	mvn.w	r2, #2
 8002c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa73 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa66 	bl	8003168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fa75 	bl	800318c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0204 	mvn.w	r2, #4
 8002ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa49 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa3c 	bl	8003168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fa4b 	bl	800318c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0208 	mvn.w	r2, #8
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2204      	movs	r2, #4
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa1f 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa12 	bl	8003168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa21 	bl	800318c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0210 	mvn.w	r2, #16
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9f5 	bl	800317a <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f9e8 	bl	8003168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f9f7 	bl	800318c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0201 	mvn.w	r2, #1
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f9c3 	bl	8003156 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d107      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fd1c 	bl	8003834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f9bb 	bl	800319e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0220 	mvn.w	r2, #32
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fce7 	bl	8003822 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0b4      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	f200 809f 	bhi.w	8002fcc <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002fcd 	.word	0x08002fcd
 8002e9c:	08002fcd 	.word	0x08002fcd
 8002ea0:	08002fcd 	.word	0x08002fcd
 8002ea4:	08002f09 	.word	0x08002f09
 8002ea8:	08002fcd 	.word	0x08002fcd
 8002eac:	08002fcd 	.word	0x08002fcd
 8002eb0:	08002fcd 	.word	0x08002fcd
 8002eb4:	08002f4b 	.word	0x08002f4b
 8002eb8:	08002fcd 	.word	0x08002fcd
 8002ebc:	08002fcd 	.word	0x08002fcd
 8002ec0:	08002fcd 	.word	0x08002fcd
 8002ec4:	08002f8b 	.word	0x08002f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f9d0 	bl	8003274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0204 	bic.w	r2, r2, #4
 8002ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6999      	ldr	r1, [r3, #24]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
      break;
 8002f06:	e062      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fa16 	bl	8003340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	619a      	str	r2, [r3, #24]
      break;
 8002f48:	e041      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa5f 	bl	8003414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0208 	orr.w	r2, r2, #8
 8002f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0204 	bic.w	r2, r2, #4
 8002f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	61da      	str	r2, [r3, #28]
      break;
 8002f88:	e021      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 faa9 	bl	80034e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
      break;
 8002fca:	e000      	b.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002fcc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_ConfigClockSource+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0a6      	b.n	800314e <HAL_TIM_ConfigClockSource+0x166>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800301e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003026:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d067      	beq.n	8003108 <HAL_TIM_ConfigClockSource+0x120>
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d80b      	bhi.n	8003054 <HAL_TIM_ConfigClockSource+0x6c>
 800303c:	2b10      	cmp	r3, #16
 800303e:	d073      	beq.n	8003128 <HAL_TIM_ConfigClockSource+0x140>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d802      	bhi.n	800304a <HAL_TIM_ConfigClockSource+0x62>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d06f      	beq.n	8003128 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003048:	e078      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800304a:	2b20      	cmp	r3, #32
 800304c:	d06c      	beq.n	8003128 <HAL_TIM_ConfigClockSource+0x140>
 800304e:	2b30      	cmp	r3, #48	; 0x30
 8003050:	d06a      	beq.n	8003128 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003052:	e073      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003054:	2b70      	cmp	r3, #112	; 0x70
 8003056:	d00d      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x8c>
 8003058:	2b70      	cmp	r3, #112	; 0x70
 800305a:	d804      	bhi.n	8003066 <HAL_TIM_ConfigClockSource+0x7e>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d033      	beq.n	80030c8 <HAL_TIM_ConfigClockSource+0xe0>
 8003060:	2b60      	cmp	r3, #96	; 0x60
 8003062:	d041      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003064:	e06a      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306a:	d066      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x152>
 800306c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003070:	d017      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003072:	e063      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f000 faf5 	bl	8003672 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003096:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	609a      	str	r2, [r3, #8]
      break;
 80030a0:	e04c      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f000 fade 	bl	8003672 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c4:	609a      	str	r2, [r3, #8]
      break;
 80030c6:	e039      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 fa55 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2150      	movs	r1, #80	; 0x50
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 faac 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 80030e6:	e029      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f000 fa73 	bl	80035e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2160      	movs	r1, #96	; 0x60
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fa9c 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 8003106:	e019      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	461a      	mov	r2, r3
 8003116:	f000 fa35 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2140      	movs	r1, #64	; 0x40
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fa8c 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 8003126:	e009      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 fa83 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 8003138:	e000      	b.n	800313c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800313a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a29      	ldr	r2, [pc, #164]	; (8003268 <TIM_Base_SetConfig+0xb8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <TIM_Base_SetConfig+0x30>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ce:	d007      	beq.n	80031e0 <TIM_Base_SetConfig+0x30>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a26      	ldr	r2, [pc, #152]	; (800326c <TIM_Base_SetConfig+0xbc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0x30>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a25      	ldr	r2, [pc, #148]	; (8003270 <TIM_Base_SetConfig+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d108      	bne.n	80031f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <TIM_Base_SetConfig+0xb8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00b      	beq.n	8003212 <TIM_Base_SetConfig+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d007      	beq.n	8003212 <TIM_Base_SetConfig+0x62>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <TIM_Base_SetConfig+0xbc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_Base_SetConfig+0x62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <TIM_Base_SetConfig+0xc0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d108      	bne.n	8003224 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <TIM_Base_SetConfig+0xb8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	615a      	str	r2, [r3, #20]
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800

08003274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f023 0201 	bic.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f023 0302 	bic.w	r3, r3, #2
 80032bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <TIM_OC1_SetConfig+0xc8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10c      	bne.n	80032ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0308 	bic.w	r3, r3, #8
 80032d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a13      	ldr	r2, [pc, #76]	; (800333c <TIM_OC1_SetConfig+0xc8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d111      	bne.n	8003316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	621a      	str	r2, [r3, #32]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40012c00 	.word	0x40012c00

08003340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0210 	bic.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0320 	bic.w	r3, r3, #32
 800338a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <TIM_OC2_SetConfig+0xd0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10d      	bne.n	80033bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a14      	ldr	r2, [pc, #80]	; (8003410 <TIM_OC2_SetConfig+0xd0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d113      	bne.n	80033ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00

08003414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800345c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <TIM_OC3_SetConfig+0xd0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10d      	bne.n	800348e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <TIM_OC3_SetConfig+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d113      	bne.n	80034be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800349c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	621a      	str	r2, [r3, #32]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <TIM_OC4_SetConfig+0x98>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d109      	bne.n	800355c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	019b      	lsls	r3, r3, #6
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00

08003584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 030a 	bic.w	r3, r3, #10
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 0210 	bic.w	r2, r3, #16
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	031b      	lsls	r3, r3, #12
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800361c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	f043 0307 	orr.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003672:	b480      	push	{r7}
 8003674:	b087      	sub	sp, #28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	431a      	orrs	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4313      	orrs	r3, r2
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	609a      	str	r2, [r3, #8]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	401a      	ands	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e032      	b.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003748:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003798:	2302      	movs	r3, #2
 800379a:	e03d      	b.n	8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e03f      	b.n	80038d8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fd f937 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003888:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fbd2 	bl	8004034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800389e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	f040 8083 	bne.w	8003a08 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_UART_Transmit+0x2e>
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07b      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x40>
 800391c:	2302      	movs	r3, #2
 800391e:	e074      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2221      	movs	r2, #33	; 0x21
 8003932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003936:	f7fd fa0b 	bl	8000d50 <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003948:	e042      	b.n	80039d0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d122      	bne.n	80039a8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f9f7 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e046      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3302      	adds	r3, #2
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	e017      	b.n	80039d0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	e013      	b.n	80039d0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f9d4 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e023      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	60ba      	str	r2, [r7, #8]
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1b7      	bne.n	800394a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2140      	movs	r1, #64	; 0x40
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f9bb 	bl	8003d60 <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e00a      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d130      	bne.n	8003a8e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_UART_Transmit_IT+0x26>
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e029      	b.n	8003a90 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Transmit_IT+0x38>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e022      	b.n	8003a90 <HAL_UART_Transmit_IT+0x7e>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2221      	movs	r2, #33	; 0x21
 8003a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d140      	bne.n	8003b36 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_UART_Receive_IT+0x26>
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e039      	b.n	8003b38 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Receive_IT+0x38>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e032      	b.n	8003b38 <HAL_UART_Receive_IT+0x9e>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2222      	movs	r2, #34	; 0x22
 8003af6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b10:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_UART_IRQHandler+0x52>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f9ce 	bl	8003f30 <UART_Receive_IT>
      return;
 8003b94:	e0cc      	b.n	8003d30 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80ab 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x1b0>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x70>
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80a0 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x90>
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	f043 0201 	orr.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_UART_IRQHandler+0xb0>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	f043 0202 	orr.w	r2, r3, #2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_UART_IRQHandler+0xd0>
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_UART_IRQHandler+0xf0>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	f043 0208 	orr.w	r2, r3, #8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d078      	beq.n	8003d2e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_UART_IRQHandler+0x112>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f96d 	bl	8003f30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <HAL_UART_IRQHandler+0x13a>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d031      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8b8 	bl	8003df4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d023      	beq.n	8003cda <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d013      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <HAL_UART_IRQHandler+0x1f4>)
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd f984 	bl	8000fc4 <HAL_DMA_Abort_IT>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	e00e      	b.n	8003cf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f83b 	bl	8003d4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	e00a      	b.n	8003cf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f837 	bl	8003d4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	e006      	b.n	8003cf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f833 	bl	8003d4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003cee:	e01e      	b.n	8003d2e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	bf00      	nop
    return;
 8003cf2:	e01c      	b.n	8003d2e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_UART_IRQHandler+0x1cc>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f8a4 	bl	8003e56 <UART_Transmit_IT>
    return;
 8003d0e:	e00f      	b.n	8003d30 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_UART_IRQHandler+0x1ec>
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f8eb 	bl	8003f00 <UART_EndTransmit_IT>
    return;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003d2e:	bf00      	nop
  }
}
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	08003e2f 	.word	0x08003e2f

08003d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d70:	e02c      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d028      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d80:	f7fc ffe6 	bl	8000d50 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d21d      	bcs.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e00f      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d0c3      	beq.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff ff80 	bl	8003d4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b21      	cmp	r3, #33	; 0x21
 8003e68:	d144      	bne.n	8003ef4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d11a      	bne.n	8003eaa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e88:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]
 8003e9c:	e00e      	b.n	8003ebc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	621a      	str	r2, [r3, #32]
 8003ea8:	e008      	b.n	8003ebc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	1c59      	adds	r1, r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6211      	str	r1, [r2, #32]
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ede:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff0b 	bl	8003d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b22      	cmp	r3, #34	; 0x22
 8003f42:	d171      	bne.n	8004028 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d123      	bne.n	8003f96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10e      	bne.n	8003f7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
 8003f78:	e029      	b.n	8003fce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
 8003f94:	e01b      	b.n	8003fce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6858      	ldr	r0, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6291      	str	r1, [r2, #40]	; 0x28
 8003fae:	b2c2      	uxtb	r2, r0
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e00c      	b.n	8003fce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	1c58      	adds	r0, r3, #1
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	6288      	str	r0, [r1, #40]	; 0x28
 8003fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d120      	bne.n	8004024 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0220 	bic.w	r2, r2, #32
 8003ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fc fdf4 	bl	8000c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e002      	b.n	800402a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800406e:	f023 030c 	bic.w	r3, r3, #12
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	430b      	orrs	r3, r1
 800407a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a52      	ldr	r2, [pc, #328]	; (80041e0 <UART_SetConfig+0x1ac>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d14e      	bne.n	800413a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7fe fc5c 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 80040a0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a4a      	ldr	r2, [pc, #296]	; (80041e4 <UART_SetConfig+0x1b0>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <UART_SetConfig+0x1b0>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <UART_SetConfig+0x1b0>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	4419      	add	r1, r3
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <UART_SetConfig+0x1b0>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a2f      	ldr	r2, [pc, #188]	; (80041e4 <UART_SetConfig+0x1b0>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	440a      	add	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004138:	e04d      	b.n	80041d6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800413a:	f7fe fbf9 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 800413e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009a      	lsls	r2, r3, #2
 800414a:	441a      	add	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	4a23      	ldr	r2, [pc, #140]	; (80041e4 <UART_SetConfig+0x1b0>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	0119      	lsls	r1, r3, #4
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009a      	lsls	r2, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	fbb2 f2f3 	udiv	r2, r2, r3
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <UART_SetConfig+0x1b0>)
 8004178:	fba3 0302 	umull	r0, r3, r3, r2
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	2064      	movs	r0, #100	; 0x64
 8004180:	fb00 f303 	mul.w	r3, r0, r3
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	3332      	adds	r3, #50	; 0x32
 800418a:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <UART_SetConfig+0x1b0>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004196:	4419      	add	r1, r3
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009a      	lsls	r2, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <UART_SetConfig+0x1b0>)
 80041b0:	fba3 0302 	umull	r0, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2064      	movs	r0, #100	; 0x64
 80041b8:	fb00 f303 	mul.w	r3, r0, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	3332      	adds	r3, #50	; 0x32
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <UART_SetConfig+0x1b0>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	440a      	add	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40013800 	.word	0x40013800
 80041e4:	51eb851f 	.word	0x51eb851f

080041e8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041e8:	b084      	sub	sp, #16
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	f107 0014 	add.w	r0, r7, #20
 80041f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr

08004208 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004210:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004214:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800421c:	b29a      	uxth	r2, r3
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	4313      	orrs	r3, r2
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800423e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004242:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800424a:	b29b      	uxth	r3, r3
 800424c:	b21a      	sxth	r2, r3
 800424e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004252:	43db      	mvns	r3, r3
 8004254:	b21b      	sxth	r3, r3
 8004256:	4013      	ands	r3, r2
 8004258:	b21b      	sxth	r3, r3
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	460b      	mov	r3, r1
 8004278:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004286:	b084      	sub	sp, #16
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	f107 0014 	add.w	r0, r7, #20
 8004294:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ffa5 	bl	8004208 <USB_EnableGlobalInt>

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ca:	b004      	add	sp, #16
 80042cc:	4770      	bx	lr
	...

080042d0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042d0:	b490      	push	{r4, r7}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d819      	bhi.n	8004332 <USB_ActivateEndpoint+0x62>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <USB_ActivateEndpoint+0x34>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004315 	.word	0x08004315
 8004308:	08004329 	.word	0x08004329
 800430c:	08004339 	.word	0x08004339
 8004310:	0800431f 	.word	0x0800431f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004314:	89bb      	ldrh	r3, [r7, #12]
 8004316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800431a:	81bb      	strh	r3, [r7, #12]
      break;
 800431c:	e00d      	b.n	800433a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800431e:	89bb      	ldrh	r3, [r7, #12]
 8004320:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004324:	81bb      	strh	r3, [r7, #12]
      break;
 8004326:	e008      	b.n	800433a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004328:	89bb      	ldrh	r3, [r7, #12]
 800432a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800432e:	81bb      	strh	r3, [r7, #12]
      break;
 8004330:	e003      	b.n	800433a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
      break;
 8004336:	e000      	b.n	800433a <USB_ActivateEndpoint+0x6a>
      break;
 8004338:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	89bb      	ldrh	r3, [r7, #12]
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	b29a      	uxth	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	b29c      	uxth	r4, r3
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	4b8a      	ldr	r3, [pc, #552]	; (80045b0 <USB_ActivateEndpoint+0x2e0>)
 8004388:	4323      	orrs	r3, r4
 800438a:	b29b      	uxth	r3, r3
 800438c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	7b1b      	ldrb	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 8112 	bne.w	80045bc <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d067      	beq.n	8004470 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043a0:	687c      	ldr	r4, [r7, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	441c      	add	r4, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	4423      	add	r3, r4
 80043b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b8:	461c      	mov	r4, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	88db      	ldrh	r3, [r3, #6]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29c      	uxth	r4, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d014      	beq.n	800440a <USB_ActivateEndpoint+0x13a>
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	b29c      	uxth	r4, r3
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <USB_ActivateEndpoint+0x2e4>)
 8004404:	4323      	orrs	r3, r4
 8004406:	b29b      	uxth	r3, r3
 8004408:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	78db      	ldrb	r3, [r3, #3]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d018      	beq.n	8004444 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004428:	b29c      	uxth	r4, r3
 800442a:	f084 0320 	eor.w	r3, r4, #32
 800442e:	b29c      	uxth	r4, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <USB_ActivateEndpoint+0x2e0>)
 800443c:	4323      	orrs	r3, r4
 800443e:	b29b      	uxth	r3, r3
 8004440:	8013      	strh	r3, [r2, #0]
 8004442:	e22b      	b.n	800489c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800445a:	b29c      	uxth	r4, r3
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	4b52      	ldr	r3, [pc, #328]	; (80045b0 <USB_ActivateEndpoint+0x2e0>)
 8004468:	4323      	orrs	r3, r4
 800446a:	b29b      	uxth	r3, r3
 800446c:	8013      	strh	r3, [r2, #0]
 800446e:	e215      	b.n	800489c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004470:	687c      	ldr	r4, [r7, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004478:	b29b      	uxth	r3, r3
 800447a:	441c      	add	r4, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	4423      	add	r3, r4
 8004484:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004488:	461c      	mov	r4, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	88db      	ldrh	r3, [r3, #6]
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	b29b      	uxth	r3, r3
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	b29b      	uxth	r3, r3
 8004496:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004498:	687c      	ldr	r4, [r7, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	441c      	add	r4, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	4423      	add	r3, r4
 80044ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044b0:	461c      	mov	r4, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10e      	bne.n	80044d8 <USB_ActivateEndpoint+0x208>
 80044ba:	8823      	ldrh	r3, [r4, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8023      	strh	r3, [r4, #0]
 80044c6:	8823      	ldrh	r3, [r4, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8023      	strh	r3, [r4, #0]
 80044d6:	e02d      	b.n	8004534 <USB_ActivateEndpoint+0x264>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b3e      	cmp	r3, #62	; 0x3e
 80044de:	d812      	bhi.n	8004506 <USB_ActivateEndpoint+0x236>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <USB_ActivateEndpoint+0x22a>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	b29b      	uxth	r3, r3
 8004502:	8023      	strh	r3, [r4, #0]
 8004504:	e016      	b.n	8004534 <USB_ActivateEndpoint+0x264>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <USB_ActivateEndpoint+0x250>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3b01      	subs	r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	b29b      	uxth	r3, r3
 8004524:	029b      	lsls	r3, r3, #10
 8004526:	b29b      	uxth	r3, r3
 8004528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004530:	b29b      	uxth	r3, r3
 8004532:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29c      	uxth	r4, r3
 8004542:	4623      	mov	r3, r4
 8004544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d014      	beq.n	8004576 <USB_ActivateEndpoint+0x2a6>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	b29c      	uxth	r4, r3
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <USB_ActivateEndpoint+0x2e8>)
 8004570:	4323      	orrs	r3, r4
 8004572:	b29b      	uxth	r3, r3
 8004574:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	b29c      	uxth	r4, r3
 800458e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004592:	b29c      	uxth	r4, r3
 8004594:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004598:	b29c      	uxth	r4, r3
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <USB_ActivateEndpoint+0x2e0>)
 80045a6:	4323      	orrs	r3, r4
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	8013      	strh	r3, [r2, #0]
 80045ac:	e176      	b.n	800489c <USB_ActivateEndpoint+0x5cc>
 80045ae:	bf00      	nop
 80045b0:	ffff8080 	.word	0xffff8080
 80045b4:	ffff80c0 	.word	0xffff80c0
 80045b8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	b29c      	uxth	r4, r3
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	4b96      	ldr	r3, [pc, #600]	; (8004838 <USB_ActivateEndpoint+0x568>)
 80045e0:	4323      	orrs	r3, r4
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045e6:	687c      	ldr	r4, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	441c      	add	r4, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	4423      	add	r3, r4
 80045fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fe:	461c      	mov	r4, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	891b      	ldrh	r3, [r3, #8]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	b29b      	uxth	r3, r3
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	8023      	strh	r3, [r4, #0]
 800460e:	687c      	ldr	r4, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	441c      	add	r4, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	4423      	add	r3, r4
 8004622:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004626:	461c      	mov	r4, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	895b      	ldrh	r3, [r3, #10]
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	b29b      	uxth	r3, r3
 8004634:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f040 8088 	bne.w	8004750 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29c      	uxth	r4, r3
 800464e:	4623      	mov	r3, r4
 8004650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d014      	beq.n	8004682 <USB_ActivateEndpoint+0x3b2>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	b29c      	uxth	r4, r3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	4b70      	ldr	r3, [pc, #448]	; (800483c <USB_ActivateEndpoint+0x56c>)
 800467c:	4323      	orrs	r3, r4
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29c      	uxth	r4, r3
 8004690:	4623      	mov	r3, r4
 8004692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d014      	beq.n	80046c4 <USB_ActivateEndpoint+0x3f4>
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	b29c      	uxth	r4, r3
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	4b60      	ldr	r3, [pc, #384]	; (8004840 <USB_ActivateEndpoint+0x570>)
 80046be:	4323      	orrs	r3, r4
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	b29c      	uxth	r4, r3
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <USB_ActivateEndpoint+0x570>)
 80046e8:	4323      	orrs	r3, r4
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	b29c      	uxth	r4, r3
 8004706:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800470a:	b29c      	uxth	r4, r3
 800470c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004710:	b29c      	uxth	r4, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	441a      	add	r2, r3
 800471c:	4b49      	ldr	r3, [pc, #292]	; (8004844 <USB_ActivateEndpoint+0x574>)
 800471e:	4323      	orrs	r3, r4
 8004720:	b29b      	uxth	r3, r3
 8004722:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473a:	b29c      	uxth	r4, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <USB_ActivateEndpoint+0x574>)
 8004748:	4323      	orrs	r3, r4
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]
 800474e:	e0a5      	b.n	800489c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29c      	uxth	r4, r3
 800475e:	4623      	mov	r3, r4
 8004760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d014      	beq.n	8004792 <USB_ActivateEndpoint+0x4c2>
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	b29c      	uxth	r4, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <USB_ActivateEndpoint+0x56c>)
 800478c:	4323      	orrs	r3, r4
 800478e:	b29b      	uxth	r3, r3
 8004790:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29c      	uxth	r4, r3
 80047a0:	4623      	mov	r3, r4
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d014      	beq.n	80047d4 <USB_ActivateEndpoint+0x504>
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c0:	b29c      	uxth	r4, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	441a      	add	r2, r3
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <USB_ActivateEndpoint+0x570>)
 80047ce:	4323      	orrs	r3, r4
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	b29c      	uxth	r4, r3
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	441a      	add	r2, r3
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <USB_ActivateEndpoint+0x56c>)
 80047f8:	4323      	orrs	r3, r4
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	78db      	ldrb	r3, [r3, #3]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d020      	beq.n	8004848 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	b29c      	uxth	r4, r3
 800481e:	f084 0320 	eor.w	r3, r4, #32
 8004822:	b29c      	uxth	r4, r3
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <USB_ActivateEndpoint+0x574>)
 8004830:	4323      	orrs	r3, r4
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
 8004836:	e01c      	b.n	8004872 <USB_ActivateEndpoint+0x5a2>
 8004838:	ffff8180 	.word	0xffff8180
 800483c:	ffffc080 	.word	0xffffc080
 8004840:	ffff80c0 	.word	0xffff80c0
 8004844:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485e:	b29c      	uxth	r4, r3
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <USB_ActivateEndpoint+0x5d8>)
 800486c:	4323      	orrs	r3, r4
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	b29c      	uxth	r4, r3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <USB_ActivateEndpoint+0x5d8>)
 8004896:	4323      	orrs	r3, r4
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc90      	pop	{r4, r7}
 80048a6:	4770      	bx	lr
 80048a8:	ffff8080 	.word	0xffff8080

080048ac <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048ac:	b490      	push	{r4, r7}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	7b1b      	ldrb	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d171      	bne.n	80049a2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d036      	beq.n	8004934 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29c      	uxth	r4, r3
 80048d4:	4623      	mov	r3, r4
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d014      	beq.n	8004908 <USB_DeactivateEndpoint+0x5c>
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	b29c      	uxth	r4, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	4b6b      	ldr	r3, [pc, #428]	; (8004ab0 <USB_DeactivateEndpoint+0x204>)
 8004902:	4323      	orrs	r3, r4
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491e:	b29c      	uxth	r4, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	4b62      	ldr	r3, [pc, #392]	; (8004ab4 <USB_DeactivateEndpoint+0x208>)
 800492c:	4323      	orrs	r3, r4
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]
 8004932:	e144      	b.n	8004bbe <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29c      	uxth	r4, r3
 8004942:	4623      	mov	r3, r4
 8004944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d014      	beq.n	8004976 <USB_DeactivateEndpoint+0xca>
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	b29c      	uxth	r4, r3
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	4b52      	ldr	r3, [pc, #328]	; (8004ab8 <USB_DeactivateEndpoint+0x20c>)
 8004970:	4323      	orrs	r3, r4
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	b29c      	uxth	r4, r3
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <USB_DeactivateEndpoint+0x208>)
 800499a:	4323      	orrs	r3, r4
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]
 80049a0:	e10d      	b.n	8004bbe <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 8088 	bne.w	8004abc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29c      	uxth	r4, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d014      	beq.n	80049ee <USB_DeactivateEndpoint+0x142>
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	b29c      	uxth	r4, r3
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <USB_DeactivateEndpoint+0x20c>)
 80049e8:	4323      	orrs	r3, r4
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29c      	uxth	r4, r3
 80049fc:	4623      	mov	r3, r4
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d014      	beq.n	8004a30 <USB_DeactivateEndpoint+0x184>
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1c:	b29c      	uxth	r4, r3
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <USB_DeactivateEndpoint+0x204>)
 8004a2a:	4323      	orrs	r3, r4
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	b29c      	uxth	r4, r3
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <USB_DeactivateEndpoint+0x204>)
 8004a54:	4323      	orrs	r3, r4
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a70:	b29c      	uxth	r4, r3
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <USB_DeactivateEndpoint+0x208>)
 8004a7e:	4323      	orrs	r3, r4
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9a:	b29c      	uxth	r4, r3
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <USB_DeactivateEndpoint+0x208>)
 8004aa8:	4323      	orrs	r3, r4
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]
 8004aae:	e086      	b.n	8004bbe <USB_DeactivateEndpoint+0x312>
 8004ab0:	ffff80c0 	.word	0xffff80c0
 8004ab4:	ffff8080 	.word	0xffff8080
 8004ab8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29c      	uxth	r4, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d014      	beq.n	8004afe <USB_DeactivateEndpoint+0x252>
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	b29c      	uxth	r4, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <USB_DeactivateEndpoint+0x320>)
 8004af8:	4323      	orrs	r3, r4
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29c      	uxth	r4, r3
 8004b0c:	4623      	mov	r3, r4
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d014      	beq.n	8004b40 <USB_DeactivateEndpoint+0x294>
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2c:	b29c      	uxth	r4, r3
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <USB_DeactivateEndpoint+0x324>)
 8004b3a:	4323      	orrs	r3, r4
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	b29c      	uxth	r4, r3
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <USB_DeactivateEndpoint+0x320>)
 8004b64:	4323      	orrs	r3, r4
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b80:	b29c      	uxth	r4, r3
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <USB_DeactivateEndpoint+0x328>)
 8004b8e:	4323      	orrs	r3, r4
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	b29c      	uxth	r4, r3
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <USB_DeactivateEndpoint+0x328>)
 8004bb8:	4323      	orrs	r3, r4
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc90      	pop	{r4, r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	ffffc080 	.word	0xffffc080
 8004bd0:	ffff80c0 	.word	0xffff80c0
 8004bd4:	ffff8080 	.word	0xffff8080

08004bd8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b08d      	sub	sp, #52	; 0x34
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	f040 8160 	bne.w	8004eac <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	699a      	ldr	r2, [r3, #24]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d909      	bls.n	8004c0c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	1ad2      	subs	r2, r2, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	619a      	str	r2, [r3, #24]
 8004c0a:	e005      	b.n	8004c18 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2200      	movs	r2, #0
 8004c16:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	7b1b      	ldrb	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d119      	bne.n	8004c54 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6959      	ldr	r1, [r3, #20]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	88da      	ldrh	r2, [r3, #6]
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fba2 	bl	8005376 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c32:	687c      	ldr	r4, [r7, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	441c      	add	r4, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	4423      	add	r3, r4
 8004c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c4a:	461c      	mov	r4, r3
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8023      	strh	r3, [r4, #0]
 8004c52:	e10f      	b.n	8004e74 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d065      	beq.n	8004d36 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c6a:	687c      	ldr	r4, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d148      	bne.n	8004d06 <USB_EPStartXfer+0x12e>
 8004c74:	687c      	ldr	r4, [r7, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	441c      	add	r4, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	4423      	add	r3, r4
 8004c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c8c:	461c      	mov	r4, r3
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10e      	bne.n	8004cb2 <USB_EPStartXfer+0xda>
 8004c94:	8823      	ldrh	r3, [r4, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8023      	strh	r3, [r4, #0]
 8004ca0:	8823      	ldrh	r3, [r4, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	8023      	strh	r3, [r4, #0]
 8004cb0:	e03d      	b.n	8004d2e <USB_EPStartXfer+0x156>
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb6:	d810      	bhi.n	8004cda <USB_EPStartXfer+0x102>
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <USB_EPStartXfer+0xf6>
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	3301      	adds	r3, #1
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	8023      	strh	r3, [r4, #0]
 8004cd8:	e029      	b.n	8004d2e <USB_EPStartXfer+0x156>
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <USB_EPStartXfer+0x118>
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	3b01      	subs	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	8023      	strh	r3, [r4, #0]
 8004d04:	e013      	b.n	8004d2e <USB_EPStartXfer+0x156>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	785b      	ldrb	r3, [r3, #1]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10f      	bne.n	8004d2e <USB_EPStartXfer+0x156>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	441c      	add	r4, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	4423      	add	r3, r4
 8004d20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	895b      	ldrh	r3, [r3, #10]
 8004d32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d34:	e063      	b.n	8004dfe <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	785b      	ldrb	r3, [r3, #1]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d148      	bne.n	8004dd0 <USB_EPStartXfer+0x1f8>
 8004d3e:	687c      	ldr	r4, [r7, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	441c      	add	r4, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	4423      	add	r3, r4
 8004d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d56:	461c      	mov	r4, r3
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10e      	bne.n	8004d7c <USB_EPStartXfer+0x1a4>
 8004d5e:	8823      	ldrh	r3, [r4, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8023      	strh	r3, [r4, #0]
 8004d6a:	8823      	ldrh	r3, [r4, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8023      	strh	r3, [r4, #0]
 8004d7a:	e03d      	b.n	8004df8 <USB_EPStartXfer+0x220>
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d80:	d810      	bhi.n	8004da4 <USB_EPStartXfer+0x1cc>
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <USB_EPStartXfer+0x1c0>
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	3301      	adds	r3, #1
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8023      	strh	r3, [r4, #0]
 8004da2:	e029      	b.n	8004df8 <USB_EPStartXfer+0x220>
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	623b      	str	r3, [r7, #32]
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <USB_EPStartXfer+0x1e2>
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	623b      	str	r3, [r7, #32]
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	029b      	lsls	r3, r3, #10
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8023      	strh	r3, [r4, #0]
 8004dce:	e013      	b.n	8004df8 <USB_EPStartXfer+0x220>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10f      	bne.n	8004df8 <USB_EPStartXfer+0x220>
 8004dd8:	687c      	ldr	r4, [r7, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	441c      	add	r4, r3
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	4423      	add	r3, r4
 8004dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004df0:	461c      	mov	r4, r3
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	891b      	ldrh	r3, [r3, #8]
 8004dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6959      	ldr	r1, [r3, #20]
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fab4 	bl	8005376 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d115      	bne.n	8004e42 <USB_EPStartXfer+0x26a>
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	b29c      	uxth	r4, r3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	4b9a      	ldr	r3, [pc, #616]	; (80050a4 <USB_EPStartXfer+0x4cc>)
 8004e3a:	4323      	orrs	r3, r4
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
 8004e40:	e018      	b.n	8004e74 <USB_EPStartXfer+0x29c>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d114      	bne.n	8004e74 <USB_EPStartXfer+0x29c>
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	b29c      	uxth	r4, r3
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	4b8e      	ldr	r3, [pc, #568]	; (80050a8 <USB_EPStartXfer+0x4d0>)
 8004e6e:	4323      	orrs	r3, r4
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8a:	b29c      	uxth	r4, r3
 8004e8c:	f084 0310 	eor.w	r3, r4, #16
 8004e90:	b29c      	uxth	r4, r3
 8004e92:	f084 0320 	eor.w	r3, r4, #32
 8004e96:	b29c      	uxth	r4, r3
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	4b82      	ldr	r3, [pc, #520]	; (80050ac <USB_EPStartXfer+0x4d4>)
 8004ea4:	4323      	orrs	r3, r4
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8013      	strh	r3, [r2, #0]
 8004eaa:	e146      	b.n	800513a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d909      	bls.n	8004ecc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	1ad2      	subs	r2, r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	619a      	str	r2, [r3, #24]
 8004eca:	e005      	b.n	8004ed8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	7b1b      	ldrb	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d148      	bne.n	8004f72 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ee0:	687c      	ldr	r4, [r7, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	441c      	add	r4, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	4423      	add	r3, r4
 8004ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ef8:	461c      	mov	r4, r3
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10e      	bne.n	8004f1e <USB_EPStartXfer+0x346>
 8004f00:	8823      	ldrh	r3, [r4, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	8023      	strh	r3, [r4, #0]
 8004f0c:	8823      	ldrh	r3, [r4, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8023      	strh	r3, [r4, #0]
 8004f1c:	e0f2      	b.n	8005104 <USB_EPStartXfer+0x52c>
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	2b3e      	cmp	r3, #62	; 0x3e
 8004f22:	d810      	bhi.n	8004f46 <USB_EPStartXfer+0x36e>
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <USB_EPStartXfer+0x362>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8023      	strh	r3, [r4, #0]
 8004f44:	e0de      	b.n	8005104 <USB_EPStartXfer+0x52c>
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <USB_EPStartXfer+0x384>
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8023      	strh	r3, [r4, #0]
 8004f70:	e0c8      	b.n	8005104 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d148      	bne.n	800500c <USB_EPStartXfer+0x434>
 8004f7a:	687c      	ldr	r4, [r7, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	441c      	add	r4, r3
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	4423      	add	r3, r4
 8004f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f92:	461c      	mov	r4, r3
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10e      	bne.n	8004fb8 <USB_EPStartXfer+0x3e0>
 8004f9a:	8823      	ldrh	r3, [r4, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8023      	strh	r3, [r4, #0]
 8004fa6:	8823      	ldrh	r3, [r4, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	8023      	strh	r3, [r4, #0]
 8004fb6:	e03d      	b.n	8005034 <USB_EPStartXfer+0x45c>
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b3e      	cmp	r3, #62	; 0x3e
 8004fbc:	d810      	bhi.n	8004fe0 <USB_EPStartXfer+0x408>
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <USB_EPStartXfer+0x3fc>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	029b      	lsls	r3, r3, #10
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	8023      	strh	r3, [r4, #0]
 8004fde:	e029      	b.n	8005034 <USB_EPStartXfer+0x45c>
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <USB_EPStartXfer+0x41e>
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	029b      	lsls	r3, r3, #10
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005006:	b29b      	uxth	r3, r3
 8005008:	8023      	strh	r3, [r4, #0]
 800500a:	e013      	b.n	8005034 <USB_EPStartXfer+0x45c>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10f      	bne.n	8005034 <USB_EPStartXfer+0x45c>
 8005014:	687c      	ldr	r4, [r7, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	441c      	add	r4, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	4423      	add	r3, r4
 8005028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800502c:	461c      	mov	r4, r3
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	b29b      	uxth	r3, r3
 8005032:	8023      	strh	r3, [r4, #0]
 8005034:	687c      	ldr	r4, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d14e      	bne.n	80050dc <USB_EPStartXfer+0x504>
 800503e:	687c      	ldr	r4, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005046:	b29b      	uxth	r3, r3
 8005048:	441c      	add	r4, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	4423      	add	r3, r4
 8005052:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005056:	461c      	mov	r4, r3
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10e      	bne.n	800507c <USB_EPStartXfer+0x4a4>
 800505e:	8823      	ldrh	r3, [r4, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005066:	b29b      	uxth	r3, r3
 8005068:	8023      	strh	r3, [r4, #0]
 800506a:	8823      	ldrh	r3, [r4, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005076:	b29b      	uxth	r3, r3
 8005078:	8023      	strh	r3, [r4, #0]
 800507a:	e043      	b.n	8005104 <USB_EPStartXfer+0x52c>
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	2b3e      	cmp	r3, #62	; 0x3e
 8005080:	d816      	bhi.n	80050b0 <USB_EPStartXfer+0x4d8>
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <USB_EPStartXfer+0x4c0>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	3301      	adds	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	b29b      	uxth	r3, r3
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8023      	strh	r3, [r4, #0]
 80050a2:	e02f      	b.n	8005104 <USB_EPStartXfer+0x52c>
 80050a4:	ffff80c0 	.word	0xffff80c0
 80050a8:	ffffc080 	.word	0xffffc080
 80050ac:	ffff8080 	.word	0xffff8080
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d102      	bne.n	80050c6 <USB_EPStartXfer+0x4ee>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8023      	strh	r3, [r4, #0]
 80050da:	e013      	b.n	8005104 <USB_EPStartXfer+0x52c>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d10f      	bne.n	8005104 <USB_EPStartXfer+0x52c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	441c      	add	r4, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	4423      	add	r3, r4
 80050f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	b29a      	uxth	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	b29c      	uxth	r4, r3
 800511c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005120:	b29c      	uxth	r4, r3
 8005122:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005126:	b29c      	uxth	r4, r3
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <USB_EPStartXfer+0x56c>)
 8005134:	4323      	orrs	r3, r4
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3734      	adds	r7, #52	; 0x34
 8005140:	46bd      	mov	sp, r7
 8005142:	bd90      	pop	{r4, r7, pc}
 8005144:	ffff8080 	.word	0xffff8080

08005148 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005148:	b490      	push	{r4, r7}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005170:	b29c      	uxth	r4, r3
 8005172:	f084 0310 	eor.w	r3, r4, #16
 8005176:	b29c      	uxth	r4, r3
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <USB_EPSetStall+0x80>)
 8005184:	4323      	orrs	r3, r4
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]
 800518a:	e017      	b.n	80051bc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	b29c      	uxth	r4, r3
 80051a4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80051a8:	b29c      	uxth	r4, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <USB_EPSetStall+0x80>)
 80051b6:	4323      	orrs	r3, r4
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc90      	pop	{r4, r7}
 80051c6:	4770      	bx	lr
 80051c8:	ffff8080 	.word	0xffff8080

080051cc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051cc:	b490      	push	{r4, r7}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	7b1b      	ldrb	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d17d      	bne.n	80052da <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d03d      	beq.n	8005262 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29c      	uxth	r4, r3
 80051f4:	4623      	mov	r3, r4
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d014      	beq.n	8005228 <USB_EPClearStall+0x5c>
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	b29c      	uxth	r4, r3
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <USB_EPClearStall+0x11c>)
 8005222:	4323      	orrs	r3, r4
 8005224:	b29b      	uxth	r3, r3
 8005226:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d054      	beq.n	80052da <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	b29c      	uxth	r4, r3
 8005248:	f084 0320 	eor.w	r3, r4, #32
 800524c:	b29c      	uxth	r4, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <USB_EPClearStall+0x120>)
 800525a:	4323      	orrs	r3, r4
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]
 8005260:	e03b      	b.n	80052da <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29c      	uxth	r4, r3
 8005270:	4623      	mov	r3, r4
 8005272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <USB_EPClearStall+0xd8>
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	b29c      	uxth	r4, r3
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <USB_EPClearStall+0x124>)
 800529e:	4323      	orrs	r3, r4
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ba:	b29c      	uxth	r4, r3
 80052bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80052c0:	b29c      	uxth	r4, r3
 80052c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80052c6:	b29c      	uxth	r4, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <USB_EPClearStall+0x120>)
 80052d4:	4323      	orrs	r3, r4
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc90      	pop	{r4, r7}
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	ffff80c0 	.word	0xffff80c0
 80052ec:	ffff8080 	.word	0xffff8080
 80052f0:	ffffc080 	.word	0xffffc080

080052f4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2280      	movs	r2, #128	; 0x80
 800530a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005350:	b29b      	uxth	r3, r3
 8005352:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005354:	68fb      	ldr	r3, [r7, #12]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005376:	b480      	push	{r7}
 8005378:	b08d      	sub	sp, #52	; 0x34
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	4611      	mov	r1, r2
 8005382:	461a      	mov	r2, r3
 8005384:	460b      	mov	r3, r1
 8005386:	80fb      	strh	r3, [r7, #6]
 8005388:	4613      	mov	r3, r2
 800538a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800538c:	88bb      	ldrh	r3, [r7, #4]
 800538e:	3301      	adds	r3, #1
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	005a      	lsls	r2, r3, #1
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ae:	e01e      	b.n	80053ee <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	3301      	adds	r3, #1
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	3302      	adds	r3, #2
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	3302      	adds	r3, #2
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	3301      	adds	r3, #1
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	3b01      	subs	r3, #1
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1dd      	bne.n	80053b0 <USB_WritePMA+0x3a>
  }
}
 80053f4:	bf00      	nop
 80053f6:	3734      	adds	r7, #52	; 0x34
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80053fe:	b480      	push	{r7}
 8005400:	b08b      	sub	sp, #44	; 0x2c
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	4611      	mov	r1, r2
 800540a:	461a      	mov	r2, r3
 800540c:	460b      	mov	r3, r1
 800540e:	80fb      	strh	r3, [r7, #6]
 8005410:	4613      	mov	r3, r2
 8005412:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005414:	88bb      	ldrh	r3, [r7, #4]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	005a      	lsls	r2, r3, #1
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005430:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	e01b      	b.n	8005470 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	3302      	adds	r3, #2
 8005444:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3301      	adds	r3, #1
 8005452:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	b2da      	uxtb	r2, r3
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	3301      	adds	r3, #1
 8005462:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	3302      	adds	r3, #2
 8005468:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	3b01      	subs	r3, #1
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e0      	bne.n	8005438 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005476:	88bb      	ldrh	r3, [r7, #4]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	701a      	strb	r2, [r3, #0]
  }
}
 8005492:	bf00      	nop
 8005494:	372c      	adds	r7, #44	; 0x2c
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	7c1b      	ldrb	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d115      	bne.n	80054e0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b8:	2202      	movs	r2, #2
 80054ba:	2181      	movs	r1, #129	; 0x81
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 fe16 	bl	80070ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054cc:	2202      	movs	r2, #2
 80054ce:	2101      	movs	r1, #1
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 fe0c 	bl	80070ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80054de:	e012      	b.n	8005506 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	2202      	movs	r2, #2
 80054e4:	2181      	movs	r1, #129	; 0x81
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 fe01 	bl	80070ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	2202      	movs	r2, #2
 80054f6:	2101      	movs	r1, #1
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 fdf8 	bl	80070ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005506:	2308      	movs	r3, #8
 8005508:	2203      	movs	r2, #3
 800550a:	2182      	movs	r1, #130	; 0x82
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 fdee 	bl	80070ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005518:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800551c:	f001 ff08 	bl	8007330 <USBD_static_malloc>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
 8005536:	e026      	b.n	8005586 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800553e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	7c1b      	ldrb	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800556c:	2101      	movs	r1, #1
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 fea7 	bl	80072c2 <USBD_LL_PrepareReceive>
 8005574:	e007      	b.n	8005586 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	2101      	movs	r1, #1
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f001 fe9e 	bl	80072c2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80055a0:	2181      	movs	r1, #129	; 0x81
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 fdc9 	bl	800713a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055ae:	2101      	movs	r1, #1
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 fdc2 	bl	800713a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055be:	2182      	movs	r1, #130	; 0x82
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f001 fdba 	bl	800713a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00e      	beq.n	80055f4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 feae 	bl	8007348 <USBD_static_free>
    pdev->pClassData = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b086      	sub	sp, #24
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005624:	2b00      	cmp	r3, #0
 8005626:	d039      	beq.n	800569c <USBD_CDC_Setup+0x9e>
 8005628:	2b20      	cmp	r3, #32
 800562a:	d17c      	bne.n	8005726 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	88db      	ldrh	r3, [r3, #6]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d029      	beq.n	8005688 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b25b      	sxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	da11      	bge.n	8005662 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800564a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	88d2      	ldrh	r2, [r2, #6]
 8005650:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005652:	6939      	ldr	r1, [r7, #16]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	88db      	ldrh	r3, [r3, #6]
 8005658:	461a      	mov	r2, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f001 f9c6 	bl	80069ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005660:	e068      	b.n	8005734 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	785a      	ldrb	r2, [r3, #1]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	88db      	ldrh	r3, [r3, #6]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005678:	6939      	ldr	r1, [r7, #16]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	88db      	ldrh	r3, [r3, #6]
 800567e:	461a      	mov	r2, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 f9e1 	bl	8006a48 <USBD_CtlPrepareRx>
      break;
 8005686:	e055      	b.n	8005734 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	7850      	ldrb	r0, [r2, #1]
 8005694:	2200      	movs	r2, #0
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	4798      	blx	r3
      break;
 800569a:	e04b      	b.n	8005734 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b0a      	cmp	r3, #10
 80056a2:	d017      	beq.n	80056d4 <USBD_CDC_Setup+0xd6>
 80056a4:	2b0b      	cmp	r3, #11
 80056a6:	d029      	beq.n	80056fc <USBD_CDC_Setup+0xfe>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d133      	bne.n	8005714 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d107      	bne.n	80056c6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80056b6:	f107 030c 	add.w	r3, r7, #12
 80056ba:	2202      	movs	r2, #2
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 f994 	bl	80069ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056c4:	e02e      	b.n	8005724 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 f925 	bl	8006918 <USBD_CtlError>
            ret = USBD_FAIL;
 80056ce:	2302      	movs	r3, #2
 80056d0:	75fb      	strb	r3, [r7, #23]
          break;
 80056d2:	e027      	b.n	8005724 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d107      	bne.n	80056ee <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80056de:	f107 030f 	add.w	r3, r7, #15
 80056e2:	2201      	movs	r2, #1
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f001 f980 	bl	80069ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056ec:	e01a      	b.n	8005724 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 f911 	bl	8006918 <USBD_CtlError>
            ret = USBD_FAIL;
 80056f6:	2302      	movs	r3, #2
 80056f8:	75fb      	strb	r3, [r7, #23]
          break;
 80056fa:	e013      	b.n	8005724 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005702:	2b03      	cmp	r3, #3
 8005704:	d00d      	beq.n	8005722 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 f905 	bl	8006918 <USBD_CtlError>
            ret = USBD_FAIL;
 800570e:	2302      	movs	r3, #2
 8005710:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005712:	e006      	b.n	8005722 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 f8fe 	bl	8006918 <USBD_CtlError>
          ret = USBD_FAIL;
 800571c:	2302      	movs	r3, #2
 800571e:	75fb      	strb	r3, [r7, #23]
          break;
 8005720:	e000      	b.n	8005724 <USBD_CDC_Setup+0x126>
          break;
 8005722:	bf00      	nop
      }
      break;
 8005724:	e006      	b.n	8005734 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 f8f5 	bl	8006918 <USBD_CtlError>
      ret = USBD_FAIL;
 800572e:	2302      	movs	r3, #2
 8005730:	75fb      	strb	r3, [r7, #23]
      break;
 8005732:	bf00      	nop
  }

  return ret;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005750:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005758:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d037      	beq.n	80057d4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	331c      	adds	r3, #28
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d026      	beq.n	80057c8 <USBD_CDC_DataIn+0x8a>
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	331c      	adds	r3, #28
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	0152      	lsls	r2, r2, #5
 8005792:	440a      	add	r2, r1
 8005794:	3238      	adds	r2, #56	; 0x38
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	fbb3 f1f2 	udiv	r1, r3, r2
 800579c:	fb02 f201 	mul.w	r2, r2, r1
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d110      	bne.n	80057c8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	331c      	adds	r3, #28
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057ba:	78f9      	ldrb	r1, [r7, #3]
 80057bc:	2300      	movs	r3, #0
 80057be:	2200      	movs	r2, #0
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fd5b 	bl	800727c <USBD_LL_Transmit>
 80057c6:	e003      	b.n	80057d0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fd86 	bl	8007308 <USBD_LL_GetRxDataSize>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005822:	4611      	mov	r1, r2
 8005824:	4798      	blx	r3

    return USBD_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800582a:	2302      	movs	r3, #2
  }
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005842:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800584a:	2b00      	cmp	r3, #0
 800584c:	d015      	beq.n	800587a <USBD_CDC_EP0_RxReady+0x46>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005854:	2bff      	cmp	r3, #255	; 0xff
 8005856:	d010      	beq.n	800587a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005866:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800586e:	b292      	uxth	r2, r2
 8005870:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2243      	movs	r2, #67	; 0x43
 8005890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005892:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	200000a0 	.word	0x200000a0

080058a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2243      	movs	r2, #67	; 0x43
 80058b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80058b2:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	2000005c 	.word	0x2000005c

080058c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2243      	movs	r2, #67	; 0x43
 80058d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80058d2:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	200000e4 	.word	0x200000e4

080058e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	220a      	movs	r2, #10
 80058f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80058f2:	4b03      	ldr	r3, [pc, #12]	; (8005900 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000018 	.word	0x20000018

08005904 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800590e:	2302      	movs	r3, #2
 8005910:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005944:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005972:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005996:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d017      	beq.n	80059d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	7c1b      	ldrb	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b4:	2101      	movs	r1, #1
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 fc83 	bl	80072c2 <USBD_LL_PrepareReceive>
 80059bc:	e007      	b.n	80059ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059c4:	2340      	movs	r3, #64	; 0x40
 80059c6:	2101      	movs	r1, #1
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 fc7a 	bl	80072c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059f0:	2302      	movs	r3, #2
 80059f2:	e01a      	b.n	8005a2a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	79fa      	ldrb	r2, [r7, #7]
 8005a20:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f001 faee 	bl	8007004 <USBD_LL_Init>

  return USBD_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d006      	beq.n	8005a54 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
 8005a52:	e001      	b.n	8005a58 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a54:	2302      	movs	r3, #2
 8005a56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fb23 	bl	80070b8 <USBD_LL_Start>

  return USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	78fa      	ldrb	r2, [r7, #3]
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3

  return USBD_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 feca 	bl	80068a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d00c      	beq.n	8005b4a <USBD_LL_SetupStage+0x56>
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d302      	bcc.n	8005b3a <USBD_LL_SetupStage+0x46>
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d010      	beq.n	8005b5a <USBD_LL_SetupStage+0x66>
 8005b38:	e017      	b.n	8005b6a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9ca 	bl	8005edc <USBD_StdDevReq>
      break;
 8005b48:	e01a      	b.n	8005b80 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa2c 	bl	8005fb0 <USBD_StdItfReq>
      break;
 8005b58:	e012      	b.n	8005b80 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fa6a 	bl	800603c <USBD_StdEPReq>
      break;
 8005b68:	e00a      	b.n	8005b80 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 fafd 	bl	8007178 <USBD_LL_StallEP>
      break;
 8005b7e:	bf00      	nop
  }

  return USBD_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	460b      	mov	r3, r1
 8005b94:	607a      	str	r2, [r7, #4]
 8005b96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d14b      	bne.n	8005c36 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ba4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d134      	bne.n	8005c1a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d919      	bls.n	8005bf0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	1ad2      	subs	r2, r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d203      	bcs.n	8005bde <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	e002      	b.n	8005be4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 ff4b 	bl	8006a84 <USBD_CtlContinueRx>
 8005bee:	e038      	b.n	8005c62 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d105      	bne.n	8005c12 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 ff48 	bl	8006aa8 <USBD_CtlSendStatus>
 8005c18:	e023      	b.n	8005c62 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c20:	2b05      	cmp	r3, #5
 8005c22:	d11e      	bne.n	8005c62 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f001 faa2 	bl	8007178 <USBD_LL_StallEP>
 8005c34:	e015      	b.n	8005c62 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d108      	bne.n	8005c5e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	7afa      	ldrb	r2, [r7, #11]
 8005c56:	4611      	mov	r1, r2
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	4798      	blx	r3
 8005c5c:	e001      	b.n	8005c62 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e000      	b.n	8005c64 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	460b      	mov	r3, r1
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d17f      	bne.n	8005d80 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3314      	adds	r3, #20
 8005c84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d15c      	bne.n	8005d4a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d915      	bls.n	8005cc8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 feb5 	bl	8006a24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f001 fafe 	bl	80072c2 <USBD_LL_PrepareReceive>
 8005cc6:	e04e      	b.n	8005d66 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	6912      	ldr	r2, [r2, #16]
 8005cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cd4:	fb02 f201 	mul.w	r2, r2, r1
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11c      	bne.n	8005d18 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d316      	bcc.n	8005d18 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d20f      	bcs.n	8005d18 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fe91 	bl	8006a24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2100      	movs	r1, #0
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 fad6 	bl	80072c2 <USBD_LL_PrepareReceive>
 8005d16:	e026      	b.n	8005d66 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d105      	bne.n	8005d3a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f001 fa1b 	bl	8007178 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fec3 	bl	8006ace <USBD_CtlReceiveStatus>
 8005d48:	e00d      	b.n	8005d66 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d004      	beq.n	8005d5e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005d5e:	2180      	movs	r1, #128	; 0x80
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f001 fa09 	bl	8007178 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d11d      	bne.n	8005dac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff fe83 	bl	8005a7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d7e:	e015      	b.n	8005dac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00d      	beq.n	8005da8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d108      	bne.n	8005da8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	7afa      	ldrb	r2, [r7, #11]
 8005da0:	4611      	mov	r1, r2
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	4798      	blx	r3
 8005da6:	e001      	b.n	8005dac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005da8:	2302      	movs	r3, #2
 8005daa:	e000      	b.n	8005dae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 f992 	bl	80070ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2240      	movs	r2, #64	; 0x40
 8005dd6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dda:	2340      	movs	r3, #64	; 0x40
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2180      	movs	r1, #128	; 0x80
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 f984 	bl	80070ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6852      	ldr	r2, [r2, #4]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	4611      	mov	r1, r2
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
  }

  return USBD_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr

08005e56 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d105      	bne.n	8005e9c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d10b      	bne.n	8005ed2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d004      	beq.n	8005f00 <USBD_StdDevReq+0x24>
 8005ef6:	2b40      	cmp	r3, #64	; 0x40
 8005ef8:	d002      	beq.n	8005f00 <USBD_StdDevReq+0x24>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <USBD_StdDevReq+0x34>
 8005efe:	e04c      	b.n	8005f9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      break;
 8005f0e:	e049      	b.n	8005fa4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	d83a      	bhi.n	8005f8e <USBD_StdDevReq+0xb2>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <USBD_StdDevReq+0x44>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005f85 	.word	0x08005f85
 8005f28:	08005f8f 	.word	0x08005f8f
 8005f2c:	08005f7b 	.word	0x08005f7b
 8005f30:	08005f8f 	.word	0x08005f8f
 8005f34:	08005f53 	.word	0x08005f53
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f8f 	.word	0x08005f8f
 8005f40:	08005f67 	.word	0x08005f67
 8005f44:	08005f5d 	.word	0x08005f5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9d4 	bl	80062f8 <USBD_GetDescriptor>
          break;
 8005f50:	e022      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fb37 	bl	80065c8 <USBD_SetAddress>
          break;
 8005f5a:	e01d      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fb74 	bl	800664c <USBD_SetConfig>
          break;
 8005f64:	e018      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fbfd 	bl	8006768 <USBD_GetConfig>
          break;
 8005f6e:	e013      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fc2c 	bl	80067d0 <USBD_GetStatus>
          break;
 8005f78:	e00e      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fc5a 	bl	8006836 <USBD_SetFeature>
          break;
 8005f82:	e009      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fc69 	bl	800685e <USBD_ClrFeature>
          break;
 8005f8c:	e004      	b.n	8005f98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fcc1 	bl	8006918 <USBD_CtlError>
          break;
 8005f96:	bf00      	nop
      }
      break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fcbb 	bl	8006918 <USBD_CtlError>
      break;
 8005fa2:	bf00      	nop
  }

  return ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop

08005fb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d003      	beq.n	8005fd2 <USBD_StdItfReq+0x22>
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d001      	beq.n	8005fd2 <USBD_StdItfReq+0x22>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d12a      	bne.n	8006028 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d81d      	bhi.n	800601a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	889b      	ldrh	r3, [r3, #4]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d813      	bhi.n	8006010 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	4798      	blx	r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	88db      	ldrh	r3, [r3, #6]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d110      	bne.n	8006024 <USBD_StdItfReq+0x74>
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10d      	bne.n	8006024 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fd4d 	bl	8006aa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800600e:	e009      	b.n	8006024 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc80 	bl	8006918 <USBD_CtlError>
          break;
 8006018:	e004      	b.n	8006024 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fc7b 	bl	8006918 <USBD_CtlError>
          break;
 8006022:	e000      	b.n	8006026 <USBD_StdItfReq+0x76>
          break;
 8006024:	bf00      	nop
      }
      break;
 8006026:	e004      	b.n	8006032 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fc74 	bl	8006918 <USBD_CtlError>
      break;
 8006030:	bf00      	nop
  }

  return USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	889b      	ldrh	r3, [r3, #4]
 800604e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006058:	2b20      	cmp	r3, #32
 800605a:	d004      	beq.n	8006066 <USBD_StdEPReq+0x2a>
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d002      	beq.n	8006066 <USBD_StdEPReq+0x2a>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <USBD_StdEPReq+0x3a>
 8006064:	e13d      	b.n	80062e2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
      break;
 8006074:	e13a      	b.n	80062ec <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800607e:	2b20      	cmp	r3, #32
 8006080:	d10a      	bne.n	8006098 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
 8006090:	4603      	mov	r3, r0
 8006092:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	e12a      	b.n	80062ee <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d03e      	beq.n	800611e <USBD_StdEPReq+0xe2>
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d002      	beq.n	80060aa <USBD_StdEPReq+0x6e>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d070      	beq.n	800618a <USBD_StdEPReq+0x14e>
 80060a8:	e115      	b.n	80062d6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d002      	beq.n	80060ba <USBD_StdEPReq+0x7e>
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d015      	beq.n	80060e4 <USBD_StdEPReq+0xa8>
 80060b8:	e02b      	b.n	8006112 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00c      	beq.n	80060da <USBD_StdEPReq+0x9e>
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d009      	beq.n	80060da <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f001 f854 	bl	8007178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 f850 	bl	8007178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060d8:	e020      	b.n	800611c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fc1b 	bl	8006918 <USBD_CtlError>
              break;
 80060e2:	e01b      	b.n	800611c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	885b      	ldrh	r3, [r3, #2]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10e      	bne.n	800610a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <USBD_StdEPReq+0xce>
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d008      	beq.n	800610a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	88db      	ldrh	r3, [r3, #6]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 f837 	bl	8007178 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fccc 	bl	8006aa8 <USBD_CtlSendStatus>

              break;
 8006110:	e004      	b.n	800611c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fbff 	bl	8006918 <USBD_CtlError>
              break;
 800611a:	bf00      	nop
          }
          break;
 800611c:	e0e0      	b.n	80062e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	2b02      	cmp	r3, #2
 8006126:	d002      	beq.n	800612e <USBD_StdEPReq+0xf2>
 8006128:	2b03      	cmp	r3, #3
 800612a:	d015      	beq.n	8006158 <USBD_StdEPReq+0x11c>
 800612c:	e026      	b.n	800617c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <USBD_StdEPReq+0x112>
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	2b80      	cmp	r3, #128	; 0x80
 8006138:	d009      	beq.n	800614e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800613a:	7bbb      	ldrb	r3, [r7, #14]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 f81a 	bl	8007178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 f816 	bl	8007178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800614c:	e01c      	b.n	8006188 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fbe1 	bl	8006918 <USBD_CtlError>
              break;
 8006156:	e017      	b.n	8006188 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	885b      	ldrh	r3, [r3, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d112      	bne.n	8006186 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f821 	bl	80071b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc97 	bl	8006aa8 <USBD_CtlSendStatus>
              }
              break;
 800617a:	e004      	b.n	8006186 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fbca 	bl	8006918 <USBD_CtlError>
              break;
 8006184:	e000      	b.n	8006188 <USBD_StdEPReq+0x14c>
              break;
 8006186:	bf00      	nop
          }
          break;
 8006188:	e0aa      	b.n	80062e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006190:	2b02      	cmp	r3, #2
 8006192:	d002      	beq.n	800619a <USBD_StdEPReq+0x15e>
 8006194:	2b03      	cmp	r3, #3
 8006196:	d032      	beq.n	80061fe <USBD_StdEPReq+0x1c2>
 8006198:	e097      	b.n	80062ca <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <USBD_StdEPReq+0x174>
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	2b80      	cmp	r3, #128	; 0x80
 80061a4:	d004      	beq.n	80061b0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fbb5 	bl	8006918 <USBD_CtlError>
                break;
 80061ae:	e091      	b.n	80062d4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da0b      	bge.n	80061d0 <USBD_StdEPReq+0x194>
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	3310      	adds	r3, #16
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4413      	add	r3, r2
 80061cc:	3304      	adds	r3, #4
 80061ce:	e00b      	b.n	80061e8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	3304      	adds	r3, #4
 80061e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2202      	movs	r2, #2
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fbf8 	bl	80069ec <USBD_CtlSendData>
              break;
 80061fc:	e06a      	b.n	80062d4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006202:	2b00      	cmp	r3, #0
 8006204:	da11      	bge.n	800622a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3318      	adds	r3, #24
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d117      	bne.n	8006250 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fb78 	bl	8006918 <USBD_CtlError>
                  break;
 8006228:	e054      	b.n	80062d4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb65 	bl	8006918 <USBD_CtlError>
                  break;
 800624e:	e041      	b.n	80062d4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006254:	2b00      	cmp	r3, #0
 8006256:	da0b      	bge.n	8006270 <USBD_StdEPReq+0x234>
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	3310      	adds	r3, #16
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4413      	add	r3, r2
 800626c:	3304      	adds	r3, #4
 800626e:	e00b      	b.n	8006288 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	3304      	adds	r3, #4
 8006288:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <USBD_StdEPReq+0x25a>
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d103      	bne.n	800629e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e00e      	b.n	80062bc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 ffa6 	bl	80071f4 <USBD_LL_IsStallEP>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e002      	b.n	80062bc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2202      	movs	r2, #2
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fb92 	bl	80069ec <USBD_CtlSendData>
              break;
 80062c8:	e004      	b.n	80062d4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb23 	bl	8006918 <USBD_CtlError>
              break;
 80062d2:	bf00      	nop
          }
          break;
 80062d4:	e004      	b.n	80062e0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fb1d 	bl	8006918 <USBD_CtlError>
          break;
 80062de:	bf00      	nop
      }
      break;
 80062e0:	e004      	b.n	80062ec <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fb17 	bl	8006918 <USBD_CtlError>
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	885b      	ldrh	r3, [r3, #2]
 8006312:	0a1b      	lsrs	r3, r3, #8
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	2b06      	cmp	r3, #6
 800631a:	f200 8128 	bhi.w	800656e <USBD_GetDescriptor+0x276>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <USBD_GetDescriptor+0x2c>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006341 	.word	0x08006341
 8006328:	08006359 	.word	0x08006359
 800632c:	08006399 	.word	0x08006399
 8006330:	0800656f 	.word	0x0800656f
 8006334:	0800656f 	.word	0x0800656f
 8006338:	0800650f 	.word	0x0800650f
 800633c:	0800653b 	.word	0x0800653b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	7c12      	ldrb	r2, [r2, #16]
 800634c:	f107 0108 	add.w	r1, r7, #8
 8006350:	4610      	mov	r0, r2
 8006352:	4798      	blx	r3
 8006354:	60f8      	str	r0, [r7, #12]
      break;
 8006356:	e112      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7c1b      	ldrb	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10d      	bne.n	800637c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	f107 0208 	add.w	r2, r7, #8
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
 8006370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	2202      	movs	r2, #2
 8006378:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800637a:	e100      	b.n	800657e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	f107 0208 	add.w	r2, r7, #8
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
 800638c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
      break;
 8006396:	e0f2      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b05      	cmp	r3, #5
 80063a0:	f200 80ac 	bhi.w	80064fc <USBD_GetDescriptor+0x204>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <USBD_GetDescriptor+0xb4>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063c5 	.word	0x080063c5
 80063b0:	080063f9 	.word	0x080063f9
 80063b4:	0800642d 	.word	0x0800642d
 80063b8:	08006461 	.word	0x08006461
 80063bc:	08006495 	.word	0x08006495
 80063c0:	080064c9 	.word	0x080064c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	7c12      	ldrb	r2, [r2, #16]
 80063dc:	f107 0108 	add.w	r1, r7, #8
 80063e0:	4610      	mov	r0, r2
 80063e2:	4798      	blx	r3
 80063e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063e6:	e091      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa94 	bl	8006918 <USBD_CtlError>
            err++;
 80063f0:	7afb      	ldrb	r3, [r7, #11]
 80063f2:	3301      	adds	r3, #1
 80063f4:	72fb      	strb	r3, [r7, #11]
          break;
 80063f6:	e089      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	7c12      	ldrb	r2, [r2, #16]
 8006410:	f107 0108 	add.w	r1, r7, #8
 8006414:	4610      	mov	r0, r2
 8006416:	4798      	blx	r3
 8006418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800641a:	e077      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa7a 	bl	8006918 <USBD_CtlError>
            err++;
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	3301      	adds	r3, #1
 8006428:	72fb      	strb	r3, [r7, #11]
          break;
 800642a:	e06f      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00b      	beq.n	8006450 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	7c12      	ldrb	r2, [r2, #16]
 8006444:	f107 0108 	add.w	r1, r7, #8
 8006448:	4610      	mov	r0, r2
 800644a:	4798      	blx	r3
 800644c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800644e:	e05d      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa60 	bl	8006918 <USBD_CtlError>
            err++;
 8006458:	7afb      	ldrb	r3, [r7, #11]
 800645a:	3301      	adds	r3, #1
 800645c:	72fb      	strb	r3, [r7, #11]
          break;
 800645e:	e055      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	7c12      	ldrb	r2, [r2, #16]
 8006478:	f107 0108 	add.w	r1, r7, #8
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
 8006480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006482:	e043      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa46 	bl	8006918 <USBD_CtlError>
            err++;
 800648c:	7afb      	ldrb	r3, [r7, #11]
 800648e:	3301      	adds	r3, #1
 8006490:	72fb      	strb	r3, [r7, #11]
          break;
 8006492:	e03b      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	7c12      	ldrb	r2, [r2, #16]
 80064ac:	f107 0108 	add.w	r1, r7, #8
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
 80064b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064b6:	e029      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa2c 	bl	8006918 <USBD_CtlError>
            err++;
 80064c0:	7afb      	ldrb	r3, [r7, #11]
 80064c2:	3301      	adds	r3, #1
 80064c4:	72fb      	strb	r3, [r7, #11]
          break;
 80064c6:	e021      	b.n	800650c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	7c12      	ldrb	r2, [r2, #16]
 80064e0:	f107 0108 	add.w	r1, r7, #8
 80064e4:	4610      	mov	r0, r2
 80064e6:	4798      	blx	r3
 80064e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ea:	e00f      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa12 	bl	8006918 <USBD_CtlError>
            err++;
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	3301      	adds	r3, #1
 80064f8:	72fb      	strb	r3, [r7, #11]
          break;
 80064fa:	e007      	b.n	800650c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa0a 	bl	8006918 <USBD_CtlError>
          err++;
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	3301      	adds	r3, #1
 8006508:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800650a:	e038      	b.n	800657e <USBD_GetDescriptor+0x286>
 800650c:	e037      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7c1b      	ldrb	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651e:	f107 0208 	add.w	r2, r7, #8
 8006522:	4610      	mov	r0, r2
 8006524:	4798      	blx	r3
 8006526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006528:	e029      	b.n	800657e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f9f3 	bl	8006918 <USBD_CtlError>
        err++;
 8006532:	7afb      	ldrb	r3, [r7, #11]
 8006534:	3301      	adds	r3, #1
 8006536:	72fb      	strb	r3, [r7, #11]
      break;
 8006538:	e021      	b.n	800657e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	7c1b      	ldrb	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f107 0208 	add.w	r2, r7, #8
 800654e:	4610      	mov	r0, r2
 8006550:	4798      	blx	r3
 8006552:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	2207      	movs	r2, #7
 800655a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800655c:	e00f      	b.n	800657e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f9d9 	bl	8006918 <USBD_CtlError>
        err++;
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	3301      	adds	r3, #1
 800656a:	72fb      	strb	r3, [r7, #11]
      break;
 800656c:	e007      	b.n	800657e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9d1 	bl	8006918 <USBD_CtlError>
      err++;
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	3301      	adds	r3, #1
 800657a:	72fb      	strb	r3, [r7, #11]
      break;
 800657c:	bf00      	nop
  }

  if (err != 0U)
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d11c      	bne.n	80065be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006584:	893b      	ldrh	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d011      	beq.n	80065ae <USBD_GetDescriptor+0x2b6>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	88db      	ldrh	r3, [r3, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88da      	ldrh	r2, [r3, #6]
 8006596:	893b      	ldrh	r3, [r7, #8]
 8006598:	4293      	cmp	r3, r2
 800659a:	bf28      	it	cs
 800659c:	4613      	movcs	r3, r2
 800659e:	b29b      	uxth	r3, r3
 80065a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065a2:	893b      	ldrh	r3, [r7, #8]
 80065a4:	461a      	mov	r2, r3
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa1f 	bl	80069ec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	88db      	ldrh	r3, [r3, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa76 	bl	8006aa8 <USBD_CtlSendStatus>
 80065bc:	e000      	b.n	80065c0 <USBD_GetDescriptor+0x2c8>
    return;
 80065be:	bf00      	nop
    }
  }
}
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop

080065c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	889b      	ldrh	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d130      	bne.n	800663c <USBD_SetAddress+0x74>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	88db      	ldrh	r3, [r3, #6]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d12c      	bne.n	800663c <USBD_SetAddress+0x74>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	885b      	ldrh	r3, [r3, #2]
 80065e6:	2b7f      	cmp	r3, #127	; 0x7f
 80065e8:	d828      	bhi.n	800663c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	885b      	ldrh	r3, [r3, #2]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d104      	bne.n	800660a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f988 	bl	8006918 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006608:	e01c      	b.n	8006644 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7bfa      	ldrb	r2, [r7, #15]
 800660e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fe11 	bl	800723e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa43 	bl	8006aa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006630:	e008      	b.n	8006644 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800663a:	e003      	b.n	8006644 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f96a 	bl	8006918 <USBD_CtlError>
  }
}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	885b      	ldrh	r3, [r3, #2]
 800665a:	b2da      	uxtb	r2, r3
 800665c:	4b41      	ldr	r3, [pc, #260]	; (8006764 <USBD_SetConfig+0x118>)
 800665e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006660:	4b40      	ldr	r3, [pc, #256]	; (8006764 <USBD_SetConfig+0x118>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d904      	bls.n	8006672 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f954 	bl	8006918 <USBD_CtlError>
 8006670:	e075      	b.n	800675e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006678:	2b02      	cmp	r3, #2
 800667a:	d002      	beq.n	8006682 <USBD_SetConfig+0x36>
 800667c:	2b03      	cmp	r3, #3
 800667e:	d023      	beq.n	80066c8 <USBD_SetConfig+0x7c>
 8006680:	e062      	b.n	8006748 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006682:	4b38      	ldr	r3, [pc, #224]	; (8006764 <USBD_SetConfig+0x118>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01a      	beq.n	80066c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800668a:	4b36      	ldr	r3, [pc, #216]	; (8006764 <USBD_SetConfig+0x118>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2203      	movs	r2, #3
 8006698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800669c:	4b31      	ldr	r3, [pc, #196]	; (8006764 <USBD_SetConfig+0x118>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff f9f4 	bl	8005a90 <USBD_SetClassConfig>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d104      	bne.n	80066b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f931 	bl	8006918 <USBD_CtlError>
            return;
 80066b6:	e052      	b.n	800675e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f9f5 	bl	8006aa8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80066be:	e04e      	b.n	800675e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f9f1 	bl	8006aa8 <USBD_CtlSendStatus>
        break;
 80066c6:	e04a      	b.n	800675e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80066c8:	4b26      	ldr	r3, [pc, #152]	; (8006764 <USBD_SetConfig+0x118>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d112      	bne.n	80066f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80066d8:	4b22      	ldr	r3, [pc, #136]	; (8006764 <USBD_SetConfig+0x118>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80066e2:	4b20      	ldr	r3, [pc, #128]	; (8006764 <USBD_SetConfig+0x118>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff f9f0 	bl	8005ace <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f9da 	bl	8006aa8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80066f4:	e033      	b.n	800675e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80066f6:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <USBD_SetConfig+0x118>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d01d      	beq.n	8006740 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff f9de 	bl	8005ace <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <USBD_SetConfig+0x118>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800671c:	4b11      	ldr	r3, [pc, #68]	; (8006764 <USBD_SetConfig+0x118>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff f9b4 	bl	8005a90 <USBD_SetClassConfig>
 8006728:	4603      	mov	r3, r0
 800672a:	2b02      	cmp	r3, #2
 800672c:	d104      	bne.n	8006738 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f8f1 	bl	8006918 <USBD_CtlError>
            return;
 8006736:	e012      	b.n	800675e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f9b5 	bl	8006aa8 <USBD_CtlSendStatus>
        break;
 800673e:	e00e      	b.n	800675e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f9b1 	bl	8006aa8 <USBD_CtlSendStatus>
        break;
 8006746:	e00a      	b.n	800675e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8e4 	bl	8006918 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <USBD_SetConfig+0x118>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff f9b9 	bl	8005ace <USBD_ClrClassConfig>
        break;
 800675c:	bf00      	nop
    }
  }
}
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200001a6 	.word	0x200001a6

08006768 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	88db      	ldrh	r3, [r3, #6]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d004      	beq.n	8006784 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8cb 	bl	8006918 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006782:	e021      	b.n	80067c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678a:	2b01      	cmp	r3, #1
 800678c:	db17      	blt.n	80067be <USBD_GetConfig+0x56>
 800678e:	2b02      	cmp	r3, #2
 8006790:	dd02      	ble.n	8006798 <USBD_GetConfig+0x30>
 8006792:	2b03      	cmp	r3, #3
 8006794:	d00b      	beq.n	80067ae <USBD_GetConfig+0x46>
 8006796:	e012      	b.n	80067be <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3308      	adds	r3, #8
 80067a2:	2201      	movs	r2, #1
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f920 	bl	80069ec <USBD_CtlSendData>
        break;
 80067ac:	e00c      	b.n	80067c8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3304      	adds	r3, #4
 80067b2:	2201      	movs	r2, #1
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f918 	bl	80069ec <USBD_CtlSendData>
        break;
 80067bc:	e004      	b.n	80067c8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f8a9 	bl	8006918 <USBD_CtlError>
        break;
 80067c6:	bf00      	nop
}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e0:	3b01      	subs	r3, #1
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d81e      	bhi.n	8006824 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	88db      	ldrh	r3, [r3, #6]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d004      	beq.n	80067f8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f891 	bl	8006918 <USBD_CtlError>
        break;
 80067f6:	e01a      	b.n	800682e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f043 0202 	orr.w	r2, r3, #2
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	330c      	adds	r3, #12
 8006818:	2202      	movs	r2, #2
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f8e5 	bl	80069ec <USBD_CtlSendData>
      break;
 8006822:	e004      	b.n	800682e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f876 	bl	8006918 <USBD_CtlError>
      break;
 800682c:	bf00      	nop
  }
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	885b      	ldrh	r3, [r3, #2]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d106      	bne.n	8006856 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f929 	bl	8006aa8 <USBD_CtlSendStatus>
  }
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686e:	3b01      	subs	r3, #1
 8006870:	2b02      	cmp	r3, #2
 8006872:	d80b      	bhi.n	800688c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	885b      	ldrh	r3, [r3, #2]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d10c      	bne.n	8006896 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f90f 	bl	8006aa8 <USBD_CtlSendStatus>
      }
      break;
 800688a:	e004      	b.n	8006896 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f842 	bl	8006918 <USBD_CtlError>
      break;
 8006894:	e000      	b.n	8006898 <USBD_ClrFeature+0x3a>
      break;
 8006896:	bf00      	nop
  }
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785a      	ldrb	r2, [r3, #1]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	3302      	adds	r3, #2
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	3303      	adds	r3, #3
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	3304      	adds	r3, #4
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	3305      	adds	r3, #5
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4413      	add	r3, r2
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	3306      	adds	r3, #6
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	3307      	adds	r3, #7
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	b29b      	uxth	r3, r3
 8006906:	4413      	add	r3, r2
 8006908:	b29a      	uxth	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	80da      	strh	r2, [r3, #6]

}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006922:	2180      	movs	r1, #128	; 0x80
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fc27 	bl	8007178 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800692a:	2100      	movs	r1, #0
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fc23 	bl	8007178 <USBD_LL_StallEP>
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d032      	beq.n	80069b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f834 	bl	80069be <USBD_GetLen>
 8006956:	4603      	mov	r3, r0
 8006958:	3301      	adds	r3, #1
 800695a:	b29b      	uxth	r3, r3
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	75fa      	strb	r2, [r7, #23]
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4413      	add	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7812      	ldrb	r2, [r2, #0]
 8006974:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	75fa      	strb	r2, [r7, #23]
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4413      	add	r3, r2
 8006982:	2203      	movs	r2, #3
 8006984:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006986:	e012      	b.n	80069ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	60fa      	str	r2, [r7, #12]
 800698e:	7dfa      	ldrb	r2, [r7, #23]
 8006990:	1c51      	adds	r1, r2, #1
 8006992:	75f9      	strb	r1, [r7, #23]
 8006994:	4611      	mov	r1, r2
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	440a      	add	r2, r1
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	75fa      	strb	r2, [r7, #23]
 80069a4:	461a      	mov	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4413      	add	r3, r2
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e8      	bne.n	8006988 <USBD_GetString+0x4e>
    }
  }
}
 80069b6:	bf00      	nop
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80069ca:	e005      	b.n	80069d8 <USBD_GetLen+0x1a>
  {
    len++;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	3301      	adds	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3301      	adds	r3, #1
 80069d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f5      	bne.n	80069cc <USBD_GetLen+0xe>
  }

  return len;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	4613      	mov	r3, r2
 80069f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2202      	movs	r2, #2
 80069fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a02:	88fa      	ldrh	r2, [r7, #6]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	2100      	movs	r1, #0
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fc31 	bl	800727c <USBD_LL_Transmit>

  return USBD_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	2100      	movs	r1, #0
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 fc1f 	bl	800727c <USBD_LL_Transmit>

  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a5e:	88fa      	ldrh	r2, [r7, #6]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006a66:	88fa      	ldrh	r2, [r7, #6]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	2100      	movs	r1, #0
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fc24 	bl	80072c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fc12 	bl	80072c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fbdc 	bl	800727c <USBD_LL_Transmit>

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2205      	movs	r2, #5
 8006ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fbec 	bl	80072c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006af8:	2200      	movs	r2, #0
 8006afa:	4912      	ldr	r1, [pc, #72]	; (8006b44 <MX_USB_DEVICE_Init+0x50>)
 8006afc:	4812      	ldr	r0, [pc, #72]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006afe:	f7fe ff6d 	bl	80059dc <USBD_Init>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b08:	f7f9 fd36 	bl	8000578 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b0c:	490f      	ldr	r1, [pc, #60]	; (8006b4c <MX_USB_DEVICE_Init+0x58>)
 8006b0e:	480e      	ldr	r0, [pc, #56]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006b10:	f7fe ff8f 	bl	8005a32 <USBD_RegisterClass>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b1a:	f7f9 fd2d 	bl	8000578 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b1e:	490c      	ldr	r1, [pc, #48]	; (8006b50 <MX_USB_DEVICE_Init+0x5c>)
 8006b20:	4809      	ldr	r0, [pc, #36]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006b22:	f7fe feef 	bl	8005904 <USBD_CDC_RegisterInterface>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b2c:	f7f9 fd24 	bl	8000578 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b30:	4805      	ldr	r0, [pc, #20]	; (8006b48 <MX_USB_DEVICE_Init+0x54>)
 8006b32:	f7fe ff97 	bl	8005a64 <USBD_Start>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b3c:	f7f9 fd1c 	bl	8000578 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20000138 	.word	0x20000138
 8006b48:	200004cc 	.word	0x200004cc
 8006b4c:	20000024 	.word	0x20000024
 8006b50:	20000128 	.word	0x20000128

08006b54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4905      	ldr	r1, [pc, #20]	; (8006b70 <CDC_Init_FS+0x1c>)
 8006b5c:	4805      	ldr	r0, [pc, #20]	; (8006b74 <CDC_Init_FS+0x20>)
 8006b5e:	f7fe fee7 	bl	8005930 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b62:	4905      	ldr	r1, [pc, #20]	; (8006b78 <CDC_Init_FS+0x24>)
 8006b64:	4803      	ldr	r0, [pc, #12]	; (8006b74 <CDC_Init_FS+0x20>)
 8006b66:	f7fe fefc 	bl	8005962 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000b78 	.word	0x20000b78
 8006b74:	200004cc 	.word	0x200004cc
 8006b78:	20000790 	.word	0x20000790

08006b7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr
	...

08006b8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	6039      	str	r1, [r7, #0]
 8006b96:	71fb      	strb	r3, [r7, #7]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	2b23      	cmp	r3, #35	; 0x23
 8006ba0:	d84a      	bhi.n	8006c38 <CDC_Control_FS+0xac>
 8006ba2:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <CDC_Control_FS+0x1c>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006c39 	.word	0x08006c39
 8006bac:	08006c39 	.word	0x08006c39
 8006bb0:	08006c39 	.word	0x08006c39
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006c39 	.word	0x08006c39
 8006bbc:	08006c39 	.word	0x08006c39
 8006bc0:	08006c39 	.word	0x08006c39
 8006bc4:	08006c39 	.word	0x08006c39
 8006bc8:	08006c39 	.word	0x08006c39
 8006bcc:	08006c39 	.word	0x08006c39
 8006bd0:	08006c39 	.word	0x08006c39
 8006bd4:	08006c39 	.word	0x08006c39
 8006bd8:	08006c39 	.word	0x08006c39
 8006bdc:	08006c39 	.word	0x08006c39
 8006be0:	08006c39 	.word	0x08006c39
 8006be4:	08006c39 	.word	0x08006c39
 8006be8:	08006c39 	.word	0x08006c39
 8006bec:	08006c39 	.word	0x08006c39
 8006bf0:	08006c39 	.word	0x08006c39
 8006bf4:	08006c39 	.word	0x08006c39
 8006bf8:	08006c39 	.word	0x08006c39
 8006bfc:	08006c39 	.word	0x08006c39
 8006c00:	08006c39 	.word	0x08006c39
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c39 	.word	0x08006c39
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c39 	.word	0x08006c39
 8006c30:	08006c39 	.word	0x08006c39
 8006c34:	08006c39 	.word	0x08006c39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c38:	bf00      	nop
  }

  return (USBD_OK);
 8006c3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop

08006c48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4805      	ldr	r0, [pc, #20]	; (8006c6c <CDC_Receive_FS+0x24>)
 8006c56:	f7fe fe84 	bl	8005962 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c5a:	4804      	ldr	r0, [pc, #16]	; (8006c6c <CDC_Receive_FS+0x24>)
 8006c5c:	f7fe fe94 	bl	8005988 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200004cc 	.word	0x200004cc

08006c70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2212      	movs	r2, #18
 8006c80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c82:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000154 	.word	0x20000154

08006c94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	6039      	str	r1, [r7, #0]
 8006c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ca6:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000168 	.word	0x20000168

08006cb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	6039      	str	r1, [r7, #0]
 8006cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d105      	bne.n	8006cd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	4907      	ldr	r1, [pc, #28]	; (8006cec <USBD_FS_ProductStrDescriptor+0x34>)
 8006cce:	4808      	ldr	r0, [pc, #32]	; (8006cf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006cd0:	f7ff fe33 	bl	800693a <USBD_GetString>
 8006cd4:	e004      	b.n	8006ce0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	4904      	ldr	r1, [pc, #16]	; (8006cec <USBD_FS_ProductStrDescriptor+0x34>)
 8006cda:	4805      	ldr	r0, [pc, #20]	; (8006cf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006cdc:	f7ff fe2d 	bl	800693a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ce0:	4b02      	ldr	r3, [pc, #8]	; (8006cec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000f60 	.word	0x20000f60
 8006cf0:	08007478 	.word	0x08007478

08006cf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	4904      	ldr	r1, [pc, #16]	; (8006d14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d04:	4804      	ldr	r0, [pc, #16]	; (8006d18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d06:	f7ff fe18 	bl	800693a <USBD_GetString>
  return USBD_StrDesc;
 8006d0a:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20000f60 	.word	0x20000f60
 8006d18:	08007490 	.word	0x08007490

08006d1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	221a      	movs	r2, #26
 8006d2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d2e:	f000 f843 	bl	8006db8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d32:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	2000016c 	.word	0x2000016c

08006d40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d105      	bne.n	8006d5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	4907      	ldr	r1, [pc, #28]	; (8006d74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d56:	4808      	ldr	r0, [pc, #32]	; (8006d78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d58:	f7ff fdef 	bl	800693a <USBD_GetString>
 8006d5c:	e004      	b.n	8006d68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	4904      	ldr	r1, [pc, #16]	; (8006d74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d62:	4805      	ldr	r0, [pc, #20]	; (8006d78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d64:	f7ff fde9 	bl	800693a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d68:	4b02      	ldr	r3, [pc, #8]	; (8006d74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000f60 	.word	0x20000f60
 8006d78:	080074a4 	.word	0x080074a4

08006d7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4907      	ldr	r1, [pc, #28]	; (8006db0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d92:	4808      	ldr	r0, [pc, #32]	; (8006db4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d94:	f7ff fdd1 	bl	800693a <USBD_GetString>
 8006d98:	e004      	b.n	8006da4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	4904      	ldr	r1, [pc, #16]	; (8006db0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d9e:	4805      	ldr	r0, [pc, #20]	; (8006db4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006da0:	f7ff fdcb 	bl	800693a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000f60 	.word	0x20000f60
 8006db4:	080074b0 	.word	0x080074b0

08006db8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006dbe:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <Get_SerialNum+0x44>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <Get_SerialNum+0x48>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006dca:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <Get_SerialNum+0x4c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006dde:	2208      	movs	r2, #8
 8006de0:	4909      	ldr	r1, [pc, #36]	; (8006e08 <Get_SerialNum+0x50>)
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 f814 	bl	8006e10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006de8:	2204      	movs	r2, #4
 8006dea:	4908      	ldr	r1, [pc, #32]	; (8006e0c <Get_SerialNum+0x54>)
 8006dec:	68b8      	ldr	r0, [r7, #8]
 8006dee:	f000 f80f 	bl	8006e10 <IntToUnicode>
  }
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	1ffff7e8 	.word	0x1ffff7e8
 8006e00:	1ffff7ec 	.word	0x1ffff7ec
 8006e04:	1ffff7f0 	.word	0x1ffff7f0
 8006e08:	2000016e 	.word	0x2000016e
 8006e0c:	2000017e 	.word	0x2000017e

08006e10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]
 8006e26:	e027      	b.n	8006e78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	0f1b      	lsrs	r3, r3, #28
 8006e2c:	2b09      	cmp	r3, #9
 8006e2e:	d80b      	bhi.n	8006e48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	0f1b      	lsrs	r3, r3, #28
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	440b      	add	r3, r1
 8006e40:	3230      	adds	r2, #48	; 0x30
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e00a      	b.n	8006e5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	0f1b      	lsrs	r3, r3, #28
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	4619      	mov	r1, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	440b      	add	r3, r1
 8006e58:	3237      	adds	r2, #55	; 0x37
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	3301      	adds	r3, #1
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	3301      	adds	r3, #1
 8006e76:	75fb      	strb	r3, [r7, #23]
 8006e78:	7dfa      	ldrb	r2, [r7, #23]
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d3d3      	bcc.n	8006e28 <IntToUnicode+0x18>
  }
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr
	...

08006e8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a0d      	ldr	r2, [pc, #52]	; (8006ed0 <HAL_PCD_MspInit+0x44>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d113      	bne.n	8006ec6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <HAL_PCD_MspInit+0x48>)
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <HAL_PCD_MspInit+0x48>)
 8006ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ea8:	61d3      	str	r3, [r2, #28]
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <HAL_PCD_MspInit+0x48>)
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2100      	movs	r1, #0
 8006eba:	2014      	movs	r0, #20
 8006ebc:	f7fa f84b 	bl	8000f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006ec0:	2014      	movs	r0, #20
 8006ec2:	f7fa f864 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	40005c00 	.word	0x40005c00
 8006ed4:	40021000 	.word	0x40021000

08006ed8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7fe fe00 	bl	8005af4 <USBD_LL_SetupStage>
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	015b      	lsls	r3, r3, #5
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	f7fe fe33 	bl	8005b8a <USBD_LL_DataOutStage>
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	015b      	lsls	r3, r3, #5
 8006f44:	4413      	add	r3, r2
 8006f46:	333c      	adds	r3, #60	; 0x3c
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f7fe fe8d 	bl	8005c6c <USBD_LL_DataInStage>
}
 8006f52:	bf00      	nop
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe ff9d 	bl	8005ea8 <USBD_LL_SOF>
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d001      	beq.n	8006f8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006f8a:	f7f9 faf5 	bl	8000578 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006f94:	7bfa      	ldrb	r2, [r7, #15]
 8006f96:	4611      	mov	r1, r2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe ff4d 	bl	8005e38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe ff06 	bl	8005db6 <USBD_LL_Reset>
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe ff47 	bl	8005e56 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <HAL_PCD_SuspendCallback+0x30>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	4a03      	ldr	r2, [pc, #12]	; (8006fe4 <HAL_PCD_SuspendCallback+0x30>)
 8006fd6:	f043 0306 	orr.w	r3, r3, #6
 8006fda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	e000ed00 	.word	0xe000ed00

08006fe8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe ff41 	bl	8005e7e <USBD_LL_Resume>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800700c:	4a28      	ldr	r2, [pc, #160]	; (80070b0 <USBD_LL_Init+0xac>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a26      	ldr	r2, [pc, #152]	; (80070b0 <USBD_LL_Init+0xac>)
 8007018:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800701c:	4b24      	ldr	r3, [pc, #144]	; (80070b0 <USBD_LL_Init+0xac>)
 800701e:	4a25      	ldr	r2, [pc, #148]	; (80070b4 <USBD_LL_Init+0xb0>)
 8007020:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007022:	4b23      	ldr	r3, [pc, #140]	; (80070b0 <USBD_LL_Init+0xac>)
 8007024:	2208      	movs	r2, #8
 8007026:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007028:	4b21      	ldr	r3, [pc, #132]	; (80070b0 <USBD_LL_Init+0xac>)
 800702a:	2202      	movs	r2, #2
 800702c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <USBD_LL_Init+0xac>)
 8007030:	2200      	movs	r2, #0
 8007032:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007034:	4b1e      	ldr	r3, [pc, #120]	; (80070b0 <USBD_LL_Init+0xac>)
 8007036:	2200      	movs	r2, #0
 8007038:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800703a:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <USBD_LL_Init+0xac>)
 800703c:	2200      	movs	r2, #0
 800703e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007040:	481b      	ldr	r0, [pc, #108]	; (80070b0 <USBD_LL_Init+0xac>)
 8007042:	f7fa f9be 	bl	80013c2 <HAL_PCD_Init>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800704c:	f7f9 fa94 	bl	8000578 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007056:	2318      	movs	r3, #24
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	f7fb f856 	bl	800210c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007066:	2358      	movs	r3, #88	; 0x58
 8007068:	2200      	movs	r2, #0
 800706a:	2180      	movs	r1, #128	; 0x80
 800706c:	f7fb f84e 	bl	800210c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007076:	23c0      	movs	r3, #192	; 0xc0
 8007078:	2200      	movs	r2, #0
 800707a:	2181      	movs	r1, #129	; 0x81
 800707c:	f7fb f846 	bl	800210c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007086:	f44f 7388 	mov.w	r3, #272	; 0x110
 800708a:	2200      	movs	r2, #0
 800708c:	2101      	movs	r1, #1
 800708e:	f7fb f83d 	bl	800210c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800709c:	2200      	movs	r2, #0
 800709e:	2182      	movs	r1, #130	; 0x82
 80070a0:	f7fb f834 	bl	800210c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20001160 	.word	0x20001160
 80070b4:	40005c00 	.word	0x40005c00

080070b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fa fa58 	bl	8001584 <HAL_PCD_Start>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f948 	bl	8007370 <USBD_Get_USB_Status>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	4608      	mov	r0, r1
 80070f8:	4611      	mov	r1, r2
 80070fa:	461a      	mov	r2, r3
 80070fc:	4603      	mov	r3, r0
 80070fe:	70fb      	strb	r3, [r7, #3]
 8007100:	460b      	mov	r3, r1
 8007102:	70bb      	strb	r3, [r7, #2]
 8007104:	4613      	mov	r3, r2
 8007106:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007116:	78bb      	ldrb	r3, [r7, #2]
 8007118:	883a      	ldrh	r2, [r7, #0]
 800711a:	78f9      	ldrb	r1, [r7, #3]
 800711c:	f7fa fb8b 	bl	8001836 <HAL_PCD_EP_Open>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 f922 	bl	8007370 <USBD_Get_USB_Status>
 800712c:	4603      	mov	r3, r0
 800712e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007130:	7bbb      	ldrb	r3, [r7, #14]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f7fa fbcc 	bl	80018f6 <HAL_PCD_EP_Close>
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 f903 	bl	8007370 <USBD_Get_USB_Status>
 800716a:	4603      	mov	r3, r0
 800716c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800716e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007192:	78fa      	ldrb	r2, [r7, #3]
 8007194:	4611      	mov	r1, r2
 8007196:	4618      	mov	r0, r3
 8007198:	f7fa fc76 	bl	8001a88 <HAL_PCD_EP_SetStall>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 f8e4 	bl	8007370 <USBD_Get_USB_Status>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071d0:	78fa      	ldrb	r2, [r7, #3]
 80071d2:	4611      	mov	r1, r2
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fa fcb1 	bl	8001b3c <HAL_PCD_EP_ClrStall>
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 f8c5 	bl	8007370 <USBD_Get_USB_Status>
 80071e6:	4603      	mov	r3, r0
 80071e8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007206:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800720c:	2b00      	cmp	r3, #0
 800720e:	da08      	bge.n	8007222 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	015b      	lsls	r3, r3, #5
 800721a:	4413      	add	r3, r2
 800721c:	332a      	adds	r3, #42	; 0x2a
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	e008      	b.n	8007234 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007222:	78fb      	ldrb	r3, [r7, #3]
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	015b      	lsls	r3, r3, #5
 800722c:	4413      	add	r3, r2
 800722e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007232:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f7fa fac5 	bl	80017ec <HAL_PCD_SetAddress>
 8007262:	4603      	mov	r3, r0
 8007264:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f881 	bl	8007370 <USBD_Get_USB_Status>
 800726e:	4603      	mov	r3, r0
 8007270:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007272:	7bbb      	ldrb	r3, [r7, #14]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	461a      	mov	r2, r3
 8007288:	460b      	mov	r3, r1
 800728a:	72fb      	strb	r3, [r7, #11]
 800728c:	4613      	mov	r3, r2
 800728e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	7af9      	ldrb	r1, [r7, #11]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	f7fa fbb7 	bl	8001a16 <HAL_PCD_EP_Transmit>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 f85e 	bl	8007370 <USBD_Get_USB_Status>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80072b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b086      	sub	sp, #24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	461a      	mov	r2, r3
 80072ce:	460b      	mov	r3, r1
 80072d0:	72fb      	strb	r3, [r7, #11]
 80072d2:	4613      	mov	r3, r2
 80072d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072e4:	893b      	ldrh	r3, [r7, #8]
 80072e6:	7af9      	ldrb	r1, [r7, #11]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	f7fa fb46 	bl	800197a <HAL_PCD_EP_Receive>
 80072ee:	4603      	mov	r3, r0
 80072f0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 f83b 	bl	8007370 <USBD_Get_USB_Status>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80072fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	4611      	mov	r1, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f7fa fb65 	bl	80019ee <HAL_PCD_EP_GetRxCount>
 8007324:	4603      	mov	r3, r0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <USBD_static_malloc+0x14>)
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	200001a8 	.word	0x200001a8

08007348 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr

0800735a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr

08007370 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d817      	bhi.n	80073b4 <USBD_Get_USB_Status+0x44>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <USBD_Get_USB_Status+0x1c>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073a3 	.word	0x080073a3
 8007394:	080073a9 	.word	0x080073a9
 8007398:	080073af 	.word	0x080073af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
    break;
 80073a0:	e00b      	b.n	80073ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073a2:	2302      	movs	r3, #2
 80073a4:	73fb      	strb	r3, [r7, #15]
    break;
 80073a6:	e008      	b.n	80073ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073a8:	2301      	movs	r3, #1
 80073aa:	73fb      	strb	r3, [r7, #15]
    break;
 80073ac:	e005      	b.n	80073ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073ae:	2302      	movs	r3, #2
 80073b0:	73fb      	strb	r3, [r7, #15]
    break;
 80073b2:	e002      	b.n	80073ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80073b4:	2302      	movs	r3, #2
 80073b6:	73fb      	strb	r3, [r7, #15]
    break;
 80073b8:	bf00      	nop
  }
  return usb_status;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bc80      	pop	{r7}
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop

080073c8 <__libc_init_array>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	2500      	movs	r5, #0
 80073cc:	4e0c      	ldr	r6, [pc, #48]	; (8007400 <__libc_init_array+0x38>)
 80073ce:	4c0d      	ldr	r4, [pc, #52]	; (8007404 <__libc_init_array+0x3c>)
 80073d0:	1ba4      	subs	r4, r4, r6
 80073d2:	10a4      	asrs	r4, r4, #2
 80073d4:	42a5      	cmp	r5, r4
 80073d6:	d109      	bne.n	80073ec <__libc_init_array+0x24>
 80073d8:	f000 f822 	bl	8007420 <_init>
 80073dc:	2500      	movs	r5, #0
 80073de:	4e0a      	ldr	r6, [pc, #40]	; (8007408 <__libc_init_array+0x40>)
 80073e0:	4c0a      	ldr	r4, [pc, #40]	; (800740c <__libc_init_array+0x44>)
 80073e2:	1ba4      	subs	r4, r4, r6
 80073e4:	10a4      	asrs	r4, r4, #2
 80073e6:	42a5      	cmp	r5, r4
 80073e8:	d105      	bne.n	80073f6 <__libc_init_array+0x2e>
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073f0:	4798      	blx	r3
 80073f2:	3501      	adds	r5, #1
 80073f4:	e7ee      	b.n	80073d4 <__libc_init_array+0xc>
 80073f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073fa:	4798      	blx	r3
 80073fc:	3501      	adds	r5, #1
 80073fe:	e7f2      	b.n	80073e6 <__libc_init_array+0x1e>
 8007400:	080074d8 	.word	0x080074d8
 8007404:	080074d8 	.word	0x080074d8
 8007408:	080074d8 	.word	0x080074d8
 800740c:	080074dc 	.word	0x080074dc

08007410 <memset>:
 8007410:	4603      	mov	r3, r0
 8007412:	4402      	add	r2, r0
 8007414:	4293      	cmp	r3, r2
 8007416:	d100      	bne.n	800741a <memset+0xa>
 8007418:	4770      	bx	lr
 800741a:	f803 1b01 	strb.w	r1, [r3], #1
 800741e:	e7f9      	b.n	8007414 <memset+0x4>

08007420 <_init>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr

0800742c <_fini>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr
